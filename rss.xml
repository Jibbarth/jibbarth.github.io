<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>‚úç Writings // Jib√© Barth</title>
        <description>Last articles published on https://jib√©barth.fr/blog</description>
        <pubDate>Wed, 16 Aug 2023 01:15:09 +0000</pubDate>
        <lastBuildDate>Sun, 12 Feb 2023 00:00:00 +0000</lastBuildDate>
        <link>https://jib√©barth.fr/blog</link>
        <language>en</language>

                                            <item>
                <title>[PHP-CS-Fixer] Configure any rule with except paths</title>
                <description>
    üëç Heads up
    Since </description>
                <link>https://jib√©barth.fr/post/configure-any-phpcsfixer-rule-with-except-paths</link>
                <guid>https://jib√©barth.fr/post/configure-any-phpcsfixer-rule-with-except-paths</guid>
                <content:encoded><![CDATA[ <div class="bg-blue-100 border-l-4 border-blue-500 text-gray-700 p-4 mb-8" role="alert">
    <p class="font-bold">üëç Heads up</p>
    <p>Since <a href="https://github.com/PHP-CS-Fixer/PHP-CS-Fixer/releases/tag/v3.18.0">PHP-CS-Fixer v3.18.0</a>,
        the issue showed in this article is no longer relevant as the FinalFixer can now read doctrine attributes.
        <br>However, the custom rule showed in this article can still be used to configure any rule with except paths.
    </p>
</div>
<blockquote>
<p>Based on a true story.</p>
</blockquote>
<p></p>
So you are hyped by new possibility of PHP8, and you start a new Symfony Project!
Thanks to maker-bundle, you create your first entities, and you get a beautiful class using PHP Attributes for doctrine.
<p>Later, you want to add <a href="https://cs.symfony.com/">PHP-CS-Fixer</a>, to keep your code consistency.</p>
<p>Finally, you decide to add a rule that add <code>final</code> to almost every class, as you read <a href="https://ocramius.github.io/blog/when-to-declare-classes-final/">this article</a>.</p>
<p>And üí•! All your tests are now failing, the new shiny project is unusable.</p>
<p>After inspect changes, all your doctrine entities are now final, and it breaks doctrine internals.</p>
<hr />
<p>The <a href="https://cs.symfony.com/doc/rules/class_notation/final_class.html">documentation of that rule</a> explain:</p>
<blockquote>
<p>No exception and no configuration are intentional. Beside Doctrine entities and of course abstract classes, there is no single reason not to declare all classes final</p>
</blockquote>
<p>So what the heck my doctrine entities are changed ?</p>
<p>Well, unfortunately, <a href="https://github.com/PHP-CS-Fixer/PHP-CS-Fixer/issues/5782">for now</a>, the tool only support Doctrine annotations, not Doctrine attributes.</p>
<p>Does it mean we have to migrate all our entities to <code>@ORM\Entity</code> instead of <code>#[ORM\Entity]</code> ?</p>
<p>Deeping into <a href="https://github.com/PHP-CS-Fixer/PHP-CS-Fixer/blob/v3.14.4/src/Fixer/ClassNotation/FinalInternalClassFixer.php#L166">source code</a>, I found that we can avoid the change if we mark entity as final with the <code>@final</code> annotation.</p>
<pre><code class="language-php">&lt;?php

namespace App\Entity;

use App\Repository\AwesomeEntityRepository;
use Doctrine\DBAL\Types\Types;
use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity(repositoryClass: AwesomeEntityRepository::class)]
/** @final */
class AwesomeEntity
{
   // ...
</code></pre>
<p>For a quick workaround, it does the job. But it would be a lie. Do we want add lies in our codebase?</p>
<p>So I decided to write a custom PhpCsFixer rule that could do the job of FinalClassFixer, but configurable with a list of path where the rule should not apply.</p>
<p>The documentation has a part about that: <a href="https://cs.symfony.com/doc/custom_rules.html">https://cs.symfony.com/doc/custom_rules.html</a></p>
<pre><code class="language-php">&lt;?php
// ...
return (new PhpCsFixer\Config())
    // ...
    -&gt;registerCustomFixers([
        new CustomerFixer1(),
        new CustomerFixer2(),
    ])
    -&gt;setRules([
        // ...
        'YourVendorName/custome_rule' =&gt; true,
        'YourVendorName/custome_rule_2' =&gt; true,
    ])
;
</code></pre>
<h3><a id="content-tldr-give-me-the-tip" href="#content-tldr-give-me-the-tip" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>TLDR (give me the tip)</h3>
<div class="text-right">
<a href="https://gist.github.com/03e4f36ccd296dcb90d83af5707532ac"
   target="_blank" rel="nofollow,noopener"
   class="px-4 py-2 bg-gray-100 text-blue-500 border border-blue-500 hover:bg-blue-500 hover:text-white">
    <i class="fa fa-external-link-alt"></i>
        See also on gist.github.com
</a>
</div>
Create the two following files:
<div data-controller="gist-file" data-gist-file-github-user-value="Jibbarth" data-gist-file-article-value="03e4f36ccd296dcb90d83af5707532ac" data-gist-file-file-value="NotInProxyFixer.php"></div>
<div data-controller="gist-file" data-gist-file-github-user-value="Jibbarth" data-gist-file-article-value="03e4f36ccd296dcb90d83af5707532ac" data-gist-file-file-value="NoValidateFixerConfigurationResolver.php"></div>
<p>Then, alter your <code>.php-cs-fixer.php</code> configuration to register that custom rule:</p>
<pre><code class="language-php">&lt;?php

$finder = (new PhpCsFixer\Finder())
    -&gt;in(__DIR__)
    -&gt;exclude('var')
;

return (new PhpCsFixer\Config())
    -&gt;registerCustomFixers([
        new \App\Fixer\NotInProxyFixer()
    ])
    -&gt;setRules([
        '@Symfony' =&gt; true,
        '@PSR12' =&gt; true,
        'Barth/not_in' =&gt; [
            'final_class' =&gt; ['except' =&gt; [
                'src/Entity',
            ]],
        ],
    ])
    -&gt;setRiskyAllowed(true)
    -&gt;setFinder($finder)
;
</code></pre>
<h3><a id="content-additional-notes" href="#content-additional-notes" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>Additional notes</h3>
<p>This custom rule should be able to handle any rule from PHP-CS-Fixer.
You just have to move it into <code>Barth/not_in</code> rule, and add the <code>except</code> array where you don't want the rule to be applied.</p>
<pre><code class="language-diff">    -&gt;setRules([
-        'final_class' =&gt; true,
+        'Barth/not_in' =&gt; [
+            'final_class' =&gt; ['except' =&gt; [
+                'src/Entity',
+            ]],
        ],
    ])
</code></pre>
<p><code>final_class</code> was my main issue, but it could be also used with the <code>method_chaining_indentation</code> when we create a bundle with a configuration and keep the custom indentation:</p>
<pre><code class="language-php">    public function getConfigTreeBuilder()
    {
        $treeBuilder = new TreeBuilder('awesome_extension');
        $rootNode = $treeBuilder-&gt;getRootNode();

        $rootNode
            -&gt;children()
                -&gt;arrayNode('test')
                    -&gt;canBeDisabled()
                -&gt;end()
            -&gt;end()
        ;

        return $treeBuilder;
    }
</code></pre>
<pre><code class="language-diff">    -&gt;setRules([
-        'method_chaining_indentation' =&gt; true,
+        'Barth/not_in' =&gt; [
+             'method_chaining_indentation' =&gt; ['except' =&gt; ['src/DependencyInjection']]
        ],
    ])
</code></pre>
<p>If your rule is configurable, you can also configure it beside the <code>except</code> key:</p>
<pre><code class="language-php">// ...
    -&gt;setRules([
        'Barth/not_in' =&gt; [
            'header_comment' =&gt; [
                'header' =&gt; 'This file belong to AwesomePackage',
                'except' =&gt; ['src/Entity']
            ],
        ],
    ])

</code></pre>
<p>It could also be boring to copy paste these file on multiple project.
I'll may create a composer package to distribute it easily.</p>
 ]]></content:encoded>
                <pubDate>Sun, 12 Feb 2023 00:00:00 +0000</pubDate>
                <author>Jib√© Barth</author>
            </item>
                                            <item>
                <title>How to build a shareable Symfony App</title>
                <description>Symfony is a powerfull framework that allow us to build complex applications. Many projects rely on it or it's components.
As a PHP developer, each time I have a new side project idea, I build it...
</description>
                <link>https://jib√©barth.fr/post/build-shareable-symfony-app</link>
                <guid>https://jib√©barth.fr/post/build-shareable-symfony-app</guid>
                <content:encoded><![CDATA[ <p>Symfony is a powerfull framework that allow us to build complex applications. Many projects rely on it or it's components.</p>
<p>As a PHP developer, each time I have a new side project idea, I build it on Symfony.</p>
<p>Sometime, I put theses projects in public on Github, in case anyone discover it and want the same app.</p>
<p>For example, I developed few time ago <a href="https://github.com/Jibbarth/slacknewsletter">Slack Newsletter</a>, a symfony app that fetch all links shared in differents channels on slack, and that build a newsletter with all theses link inside each weeks.</p>
<p><img src="https://repository-images.githubusercontent.com/129633240/a2815d80-adbe-11ea-9379-b3b04705d572" alt="slack newsletter example" /></p>
<p>I reused this app for multiple slack, and something always bothered me. Each time I made an improvement on the base repository, fetching update on the fork can be a pain. Because, on the fork, I alter sometime the template, sometime the configuration, etc.</p>
<p>So, today, I had in my mind to find a way to easily build a Symfony app, and made it shareable.</p>
<p>The main repo would be the application itself, but others would just require the app as a dependency, as a bundle, so no fork to do.</p>
<p>As far as I see from others project, for such a case, they have two repo. The bundle itself, and another symfony project that require the bundle.</p>
<p>It could be the easiest way, but I don't want to manage two repository, even more when I work on a side project.  It has to be fun, not boring to jump between two repositories.</p>
<p>Recently, I discovered that there is a new Bundle structure in Symfony, to be clother to a Symfony Project Structure.</p>
<p>With this new structure, here is how your bundle can be organized :</p>
<pre><code class="language-bash">AcmeAwesomeBundle
‚îú‚îÄ‚îÄ assets
‚îú‚îÄ‚îÄ config
‚îú‚îÄ‚îÄ public
‚îú‚îÄ‚îÄ src
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ AcmeAwesomeBundle.php
‚îú‚îÄ‚îÄ templates
‚îú‚îÄ‚îÄ tests
‚îî‚îÄ‚îÄ translations
</code></pre>
<p>Sound familiar, right ? üòè</p>
<p>Yep, it's the same as our symfony app.</p>
<p>You can find more information on this new structure <a href="https://symfony.com/doc/current/bundles/best_practices.html#directory-structure">on symfony docs</a>, <a href="https://github.com/symfony/symfony/pull/32845">in the PR implementing it</a>, or in this <a href="https://github.com/yceruto/acme-bundle">demo bundle</a>.</p>
<p>My idea is so to start from a symfony skeleton project, and code inside like a bundle. The boilerplate provided by the skeleton and recipes will made the app working, and once you distribute it through composer, it'll act as a bundle.</p>
<p>That's the point.</p>
<p>Interested ? The following part will dive into this concept, to transform a standard skeleton app into a standalone bundle shareable.</p>
<hr />
<p>To validate my idea, I created two application from the skeleton :</p>
<pre><code class="language-bash"># ~/Projects
composer create-project symfony/skeleton main-app
composer create-project symfony/skeleton consumer-app
</code></pre>
<p>And start them :</p>
<pre><code class="language-bash"># ~/Projects/main-app
symfony serve -d
# ~/Projects/consumer-app
symfony serve -d
</code></pre>
<p>Now, open your favorite IDE on the <code>main-app</code> folder.</p>
<p>First thing to do, edit the <code>composer.json</code> to add a name to our app/bundle, and mark its type as <code>symfony-bundle</code>.</p>
<pre><code class="language-diff"># composer.json
{
-    &quot;type&quot;: &quot;project&quot;,
-    &quot;license&quot;: &quot;proprietary&quot;,
+    &quot;name&quot;: &quot;acme/my-app-bundle&quot;,
+    &quot;type&quot;: &quot;symfony-bundle&quot;,
+    &quot;license&quot;: &quot;MIT&quot;,
    &quot;minimum-stability&quot;: &quot;stable&quot;,
    &quot;prefer-stable&quot;: true,
    ...
</code></pre>
<p>In the same time, change also the PSR4 declaration :</p>
<pre><code class="language-diff"># composer.json
    &quot;autoload&quot;: {
        &quot;psr-4&quot;: {
-            &quot;App\\&quot;: &quot;src/&quot;
+            &quot;Acme\\MyAppBundle\\&quot;: &quot;src/&quot;
        }
    },
</code></pre>
<p>As we remove the App namespace, let's change it in the Kernel, and references to this Kernel into <code>bin/console</code> and <code>public/index.php</code>:</p>
<pre><code class="language-php"># src/Kernel.php
&lt;?php

namespace Acme\MyAppBundle;

// use ...

class Kernel extends BaseKernel
{
    //...
</code></pre>
<pre><code class="language-php"># bin/console.php and public/index.php
&lt;?php

use Acme\MyAppBundle\Kernel;
//...
</code></pre>
<p>Now, create a <code>AcmeMyAppBundle.php</code> beside the <code>Kernel</code>.</p>
<pre><code class="language-php"># src/AcmeMyAppBundle.php
&lt;?php

declare(strict_types=1);

namespace Acme\MyAppBundle;

use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\HttpKernel\Bundle\Bundle;

final class AcmeMyAppBundle extends Bundle
{
    public function build(ContainerBuilder $container)
    {
        parent::build($container);
		// If you need to add compiler pass, register them here
        //$container-&gt;addCompilerPass(new MyAwesomeCompilerPass());
    }

    public function getPath(): string
    {
        return \dirname(__DIR__);
    }
}
</code></pre>
<p>And register your bundle in <code>config/bundles.php</code>:</p>
<pre><code class="language-php"># config/bundles.php
&lt;?php

return [
    Symfony\Bundle\FrameworkBundle\FrameworkBundle::class =&gt; ['all' =&gt; true],
    Acme\MyAppBundle\AcmeMyAppBundle::class =&gt; ['all' =&gt; true],
];
</code></pre>
<p>To avoid recursive assets installation, create a <code>Resources/public</code> folder at the root of your project:</p>
<pre><code class="language-bash"># ~/Projects/main-app
mkdir -p Resources/public
</code></pre>
<p>For the services and package configuration that I have to change, I decided to create a <code>config/bundle</code> folder to isolate them from the standalone app.</p>
<p>I also decided to use a <code>services.php</code> instead a yaml file, but it's up to you.</p>
<pre><code class="language-php"># config/bundle/services.php
&lt;?php

declare(strict_types=1);

use Symfony\Component\DependencyInjection\Loader\Configurator\ContainerConfigurator;

return static function (ContainerConfigurator $containerConfigurator): void {
    $services = $containerConfigurator-&gt;services();

    $services-&gt;defaults()
        -&gt;autowire()
        -&gt;autoconfigure();

    $services-&gt;load('Acme\MyAppBundle\\', '../../src/')
        -&gt;exclude([
            '../../src/DependencyInjection/',
            '../../src/Entity/',
            '../../src/AcmeMyAppBundle.php',
            '../../src/Kernel.php',
        ]);
};
</code></pre>
<p>This file will contain all our services declarations for our app. The <code>config/services.yaml</code> is not anymore mandatory, but to avoid altering so much the Kernel, I decided to just remove the <code>App</code> declaration in it :</p>
<pre><code class="language-diff"># config/services.yaml
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
-    App\:
-        resource: '../src/'
-        exclude:
-            - '../src/DependencyInjection/'
-            - '../src/Entity/'
-            - '../src/Kernel.php'
-            - '../src/Tests/'

</code></pre>
<p>But now, we need an Extension to load our services. Let's create it :</p>
<pre><code class="language-php">&lt;?php

declare(strict_types=1);

namespace Acme\MyAppBundle\DependencyInjection;

use Symfony\Component\Config\FileLocator;
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\DependencyInjection\Extension\Extension;
use Symfony\Component\DependencyInjection\Loader\PhpFileLoader;

final class AcmeMyAppExtension extends Extension
{
    public function load(array $configs, ContainerBuilder $container)
    {
        $loader = new PhpFileLoader($container, new FileLocator(dirname(__DIR__, 2) . '/config/bundle'));

        $loader-&gt;load('services.php');
    }
}
</code></pre>
<p>Let's see how working with routing now.</p>
<p>Create a sample controller :</p>
<pre><code class="language-php"># src/Controller/IndexController
&lt;?php

declare(strict_types=1);

namespace Acme\MyAppBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

class IndexController extends AbstractController
{
    #[Route('/', name: 'index')]
    public function index(): Response
    {
        return new Response('Hello from AcmeMyAppBundle');
    }
}
</code></pre>
<p>In a normal case, we add to declare an annotation routing in the app. The recipe when we require <code>doctine/annotation</code> add this file</p>
<pre><code class="language-yaml"># config/routes/annotations.yaml
controllers:
    resource: ../../src/Controller/
    type: annotation
</code></pre>
<p>But as we are now in a bundle, let's create a shareable routing file. So let's remove the file <code>config/routes/annotations.yaml</code> to don't get disturbed by it, and create a routing file in <code>config/bundle</code>.</p>
<p>Here again, I decided to wrote it in php, but others formats work too.</p>
<pre><code class="language-php"># config/bundle/routing.php
&lt;?php

declare(strict_types=1);

use Symfony\Component\Routing\Loader\Configurator\RoutingConfigurator;

return function (RoutingConfigurator $routes) {
    $routes-&gt;import('@AcmeMyAppBundle/src/Controller/', 'annotation');
};

</code></pre>
<p>As same for the services, you now have to declare all your routing here.</p>
<p>But if we try to reach this page, the default page from symfony is remaining.
In effect, in Symfony app, it's the kernel that has the responsability to fetch the routes, and it's not configured to fetch our new file.</p>
<p>instead of altering the <code>Kernel.php</code>, require our routing in the dedicated folder like for any other bundles :</p>
<pre><code class="language-yaml"># config/routes/acme_myapp.yaml
acme_myapp:
  resource: &quot;@AcmeMyAppBundle/config/bundle/routing.php&quot;
</code></pre>
<p>And VOILA : Our controller works as expected üíñ</p>
<p>Now, we just have to build the side project we want, it's totally shareable as a bundle ‚ú®</p>
<p>Don't believe me? Need a proof?</p>
<p>ü§î Okay. Remember the <code>consumer-app</code> ? Let's require our new bundle inside it.</p>
<p>First, as we don't push anything, configure the composer.json of the secondary project to fetch our &quot;bundle&quot;.</p>
<pre><code class="language-yaml"># ~/Projects/consumer-app/composer.json
    &quot;repositories&quot;: [
        {
            &quot;type&quot;: &quot;path&quot;,
            &quot;url&quot;: &quot;../main/&quot;
        }
    ],
</code></pre>
<p>And require it through <code>composer</code> :</p>
<pre><code class="language-bash"># ~/Projects/consumer-app
composer require acme/my-app-bundle
</code></pre>
<p>As <code>symfony/flex</code> is enabled, our new bundle is automatically registered. Check <code>config/bundles.php</code>.</p>
<p>Import routing in this repository too:</p>
<pre><code class="language-yaml"># config/routes/acme_myapp.yaml
acme_myapp:
  resource: &quot;@AcmeMyAppBundle/config/bundle/routing.php&quot;
  # you can give here also a prefix like /my-app if you want to have a site with multiple app-bundles ;)
  #prefix: '/my-app'

</code></pre>
<p>Try to reach your consume-app, the controller from your bundle is now responding.</p>
<hr/>
<p>With this method, I'm now able to produce some open-source apps that could be easily required by others. And others can directly contribute to the app to get thing improved, instead of altering directly the source code in a different fork that can't be sync with the main repo.</p>
<p>I just covered here the very basic, maybe I'll write later about how to prepend configuration of others bundles in main app, to directly dispatch it to others without them have to follow an upgrade process, altering configuration files.
A focus on entities could be done also, doctrine allowing now to execute migrations that are in bundles.</p>
<p>And now, I have some work to do to refact my existing open source app and transform them in bundles üòâ</p>
<p>Thanks for reading,</p>
<p><img src="https://media.giphy.com/media/dRvEZLV0ORAmHT1L5u/giphy.gif" alt="See ya later" /></p>
 ]]></content:encoded>
                <pubDate>Sat, 06 Nov 2021 00:00:00 +0000</pubDate>
                <author>Jib√© Barth</author>
            </item>
                                            <item>
                <title>PHPInsights v2 released</title>
                <description>In case you missed the following tweet, let me introduce the new v2.0 for PHPInsights.
</description>
                <link>https://jib√©barth.fr/post/phpinsights-v2-released</link>
                <guid>https://jib√©barth.fr/post/phpinsights-v2-released</guid>
                <content:encoded><![CDATA[ <p>In case you missed the following tweet, let me introduce the new <strong>v2.0</strong> for <a href="https://phpinsights.com">PHPInsights</a>.</p>
<div data-controller="tweet-embed" data-tweet-embed-id-value="1385995349605724162">
<blockquote><p lang="en" dir="ltr">People using PHP Insights: <a href="https://twitter.com/jibbarth?ref_src=twsrc%5Etfw">@jibbarth</a> is making the final preparations for v2 ‚Äî this release will feature:<br><br>‚úì An &quot;--fix&quot; option that applies the fixes proposed by <a href="https://twitter.com/phpinsights?ref_src=twsrc%5Etfw">@phpinsights</a> automatically. üî•<br>‚úì Blazing fast analysis by using cache and all your CPU cores. üöÄ<br>‚úì And more! <a href="https://t.co/K4w5rNFpwr">pic.twitter.com/K4w5rNFpwr</a></p>&mdash; Nuno Maduro (@enunomaduro) <a href="https://twitter.com/enunomaduro/status/1385995349605724162?ref_src=twsrc%5Etfw">April 24, 2021</a></blockquote>
</div>
<p>This new version was mainly focused to improve performances, but it came also with new shiny features ‚ú®</p>
<p>Let's discover them together.</p>
<h3><a id="content-speed-up-the-analysis-process-" href="#content-speed-up-the-analysis-process-" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>Speed up the analysis process üöÄ</h3>
<p>Back in march 2020, I started to learn using <a href="https://blackfire.io">Blackfire</a> by following this <a href="https://symfonycasts.com/screencast/blackfire">course on SymfonyCast</a>.
Just after that, I decided to dig into PHPInsights to find ways to improve performances.</p>
<p>With this great tool, <a href="https://twitter.com/OliverNybroe">Oliver</a> and I found some bottleneck, and we started to gain huge performances !</p>
<p><img src="https://user-images.githubusercontent.com/3168281/115996462-a89bb980-a5df-11eb-8d88-2caee35c66f7.png" alt="First run of performances gain" /></p>
<p>The next step was to add cached results.</p>
<p>When we run twice an analysis, all files are reanalyzed. What a boring process. As files doesn't change, the tool should keep the results.</p>
<p>Thanks to <a href="https://symfony.com/doc/current/components/cache.html">symfony/cache</a>, we can now store all issues details in cache, and avoid recheck a file if it's content doesn't change between two analysis.</p>
<p><img src="https://user-images.githubusercontent.com/3168281/81601081-ca9a2d00-93ca-11ea-9985-99980e2ad8d5.gif" alt="Cache usage" /></p>
<p>Finally, the most powerful tweak we do to improve performances is allow to use multiples CPU cores !</p>
<p>A new options is available in the  <code>phpinsights.php</code> configuration file : <code>threads</code>. Specify here how many core you want to use.
If you don't specify it, the tool is able to detect how many CPU core your computer has, and use them all.</p>
<p>See this example, with an <code>htop</code> profiling CPU core at the bottom :</p>
<p><img src="https://user-images.githubusercontent.com/3168281/115996108-47271b00-a5de-11eb-972b-ae6bc57681c6.gif" alt="PHPInsights Parallelization" /></p>
<p>Thanks to all theses improvements, we increase performance of 93% üöÄ</p>
<p><img src="https://user-images.githubusercontent.com/3168281/115996469-adf90400-a5df-11eb-9221-a5b6c08475f9.png" alt="Final blackfire comparison" /></p>
<h3><a id="content-auto-fixer-" href="#content-auto-fixer-" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>Auto-fixer üåü</h3>
<p>As lot of Insights came from PHPCS or PHP-CS-Fixer, you can now fix them automatically.
Just append the  <code>--fix</code>  option, and üéâ. After the analysis report, you'll get what has been fixed.</p>
<p>If you don't want to get the full report, just launch <code>vendor/bin/phpinsights fix</code>.</p>
<p><img src="https://user-images.githubusercontent.com/3168281/115998397-4e065b80-a5e7-11eb-9afd-c8fd3ac49d6f.gif" alt="PHPInsights autofixer" /></p>
<h3><a id="content-better-feedbacks-on-your-ci-" href="#content-better-feedbacks-on-your-ci-" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>Better feedbacks on your CI ü§ñ</h3>
<p><a href="https://twitter.com/50bhan">@50bhan</a> provide a way to specify multiple paths or files to analyze. This great feature allow you to use report only issues on changed files for a Pull Request with our GithubAction formatter :</p>
<pre><code class="language-yaml">  - name: PHPInsight on new/modified files
    if: github.event_name == 'pull_request'
    run: |
        URL=&quot;https://api.github.com/repos/${GITHUB_REPOSITORY}/pulls/${{ github.event.pull_request.number }}/files&quot;
        # Retrieve list of add/modified files
        FILES=$(curl -s -X GET -G $URL | jq -r '.[] |  select( .status == &quot;added&quot; or .status == &quot;modified&quot;) | select(.filename|endswith(&quot;.php&quot;)) | .filename')
        # Launch phpinsights against theses files
        php vendor/bin/phpinsights analyse $FILES --ansi -v -n --format=github-action
</code></pre>
<p><img src="https://user-images.githubusercontent.com/3168281/115997313-f6fe8780-a5e2-11eb-9fc5-7e933339c6c7.png" alt="feedback on PRs" /></p>
<p>For peoples that don't use GithubAction but prefer Jenkins, <a href="https://github.com/dsamburskyi">@dsamburskyi</a> improved the Checkstyle report, that allow the Warning NG plugin to correctly display it. Jenkins users, enjoy ‚ú®</p>
<p><img src="https://user-images.githubusercontent.com/25210529/110533067-975c2380-80eb-11eb-8caf-bac106000d73.png" alt="Warning NG on Jenkins" /></p>
<p>Finally, for <strong>Gitlab</strong> users, <a href="https://twitter.com/guywarner801">@guywarner</a> add a new formatter to display results for <code>codeclimate</code>.</p>
<pre><code class="language-yaml">#.gitlab-ci.yml
insights:
  script:
    - vendor/bin/phpinsights -n --ansi --format=codeclimate &gt; codeclimate-report.json
  artifacts:
    reports:
      codequality: codeclimate-report.json
</code></pre>
<h3><a id="content-dependencies-update-" href="#content-dependencies-update-" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>Dependencies update üîß</h3>
<p>In this version, PHPInsights is fully compatible with PHP8 and Composer2. We also drop abandonned packages and upgrade to latest version of <a href="https://github.com/slevomat/coding-standard">Slevomat/Coding-Standard</a> and <a href="https://cs.symfony.com/">PHP-CS-Fixer</a>. Thank you <a href="https://twitter.com/50bhan">@50bhan</a> for handling this üí™</p>
<p>Some Insights are already aware when you use PHP8 and are able to detect old fashion usage that could be refactored.
For example, in PHP8, you can use <code>::class</code> on every object instead calling the <code>get_class()</code> function.</p>
<p><img src="https://user-images.githubusercontent.com/3168281/115997977-68d7d080-a5e5-11eb-9f16-80bc9b9d4942.png" alt="php8 aware" /></p>
<h3><a id="content-real-time-monitor-" href="#content-real-time-monitor-" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>Real time monitor üìà</h3>
<p>A new <code>--summary</code> option is now available. By running following code, you can get an real time monitor of state of your code</p>
<pre><code class="language-bash">watch -c -b php vendor/bin/phpinsights --summary --ansi
</code></pre>
<div data-controller="tweet-embed" data-tweet-embed-id-value="1387496703012507650">
<blockquote><p lang="en" dir="ltr">üìàDo you want a Real-Time monitor of <a href="https://twitter.com/phpinsights?ref_src=twsrc%5Etfw">@phpinsights</a> while you have a coding session ? <br><br>This PR might be helpful üòâ <a href="https://t.co/BT1md5quyj">https://t.co/BT1md5quyj</a> <a href="https://t.co/2lrRNxmGWD">pic.twitter.com/2lrRNxmGWD</a></p>&mdash; JiB√© Barth (@jibbarth) <a href="https://twitter.com/jibbarth/status/1387496703012507650?ref_src=twsrc%5Etfw">April 28, 2021</a></blockquote></div>
<h3><a id="content-and-lots-of-few-bugs-fixed-thanks-of-the-awesome-community-" href="#content-and-lots-of-few-bugs-fixed-thanks-of-the-awesome-community-" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>And lots of few bugs fixed, thanks of the awesome community üôå:</h3>
<p>I strongly encourage you to browse the <a href="https://github.com/nunomaduro/phpinsights/blob/master/CHANGELOG.md#v200">full changelog</a>.</p>
<p>We hope you'll enjoy this new release üòä</p>
<h2><a id="content-whats-coming-next-" href="#content-whats-coming-next-" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>What's coming next ?</h2>
<p>We've few ideas for the following releases.</p>
<p>We thought about integrate <a href="https://getrector.org/">Rector</a>, and <a href="https://twitter.com/50bhan">@50bhan</a> already start working on this.</p>
<p>I would also love to quickly import <a href="https://github.com/FriendsOfPHP/PHP-CS-Fixer/blob/3.0/doc/ruleSets/index.rst#list-of-available-rule-sets">sets from PHP-CS-Fixer</a> to automatically add batch of rules pre-configured.</p>
<p>Other idea ? Create an issue or send a Pull Request : <a href="https://github.com/nunomaduro/phpinsights">https://github.com/nunomaduro/phpinsights</a></p>
 ]]></content:encoded>
                <pubDate>Mon, 21 Jun 2021 00:00:00 +0000</pubDate>
                <author>Jib√© Barth</author>
            </item>
                                            <item>
                <title>[Tips] Non blocking long api call</title>
                <description>If you have to make some external API call during a process, but you have no need to wait the response to return result to the user, this tip can help you:
</description>
                <link>https://jib√©barth.fr/post/non-blocking-long-api-call</link>
                <guid>https://jib√©barth.fr/post/non-blocking-long-api-call</guid>
                <content:encoded><![CDATA[ <p>If you have to make some external API call during a process, but you have no need to wait the response to return result to the user, this tip can help you:</p>
<div data-controller="tweet-embed" data-tweet-embed-id-value="1379011895915593728"></div>
<p>On Symfony, the <code>kernel.terminate</code> event is launched after the response has been sent to the user.</p>
<p>The response from <a href="https://github.com/symfony/http-client">symfony/http-client</a> is by design asynchronous, but when the object is destroyed, it'll wait the request is completed (see <a href="https://github.com/symfony/http-client/blob/5.3/Response/AsyncResponse.php#L176-L182">here</a>).</p>
<p>By keep the response instance and using it in <code>kernel.terminate</code> event, we don't have to wait the request is completed before render result to user.</p>
<div data-controller="tweet-embed" data-tweet-embed-id-value="1379011900588052482"></div>
<p>If you use Laravel &gt;= 8.x, you can also dispatch event after response is sent :</p>
<div data-controller="tweet-embed" data-tweet-embed-id-value="1379057717051064322" data-tweet-embed-conv-value="true"></div>
 ]]></content:encoded>
                <pubDate>Mon, 05 Apr 2021 00:00:00 +0000</pubDate>
                <author>Jib√© Barth</author>
            </item>
                                            <item>
                <title>[Sylius] Restrict Payment Methods depending on customer group</title>
                <description>It could be common to display some payment methods only to customers that belong to a group.
For example, you can add an offline payment method for you B2B customers, and invoice them at the end...
</description>
                <link>https://jib√©barth.fr/gist/53569b2072996fe7d2a36faf2eaa577d</link>
                <guid>https://jib√©barth.fr/gist/53569b2072996fe7d2a36faf2eaa577d</guid>
                <content:encoded><![CDATA[ <p>It could be common to display some payment methods only to customers that belong to a group.</p>
<p>For example, you can add an offline payment method for you B2B customers, and invoice them at the end of the month, and this offline payment should absolutely not be available for other customer!
Let's see how to integrate this in a Sylius Application.</p>
<h2><a id="content-1-the-quick-and-dirty-way" href="#content-1-the-quick-and-dirty-way" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>1. The Quick and Dirty way</h2>
<p>The form displaying payment methods in Sylius retrieve them from the service <code>sylius.payment_methods_resolver</code>.</p>
<p>Let's decorate it !</p>
<p>First, create a class <code>PaymentMethodsResolverDecorator</code> which extend <code>PaymentMethodsResolverInterface</code>, and that have this same interface as first dependency.</p>
<pre><code class="language-php">// src/Resolver/PaymentMethodsResolverDecorator.php
&lt;?php

declare(strict_types=1);

namespace App\Resolver;

use Sylius\Component\Payment\Model\PaymentInterface;
use Sylius\Component\Payment\Model\PaymentMethodInterface;
use Sylius\Component\Payment\Resolver\PaymentMethodsResolverInterface;

final class PaymentMethodResolverDecorator implements PaymentMethodsResolverInterface
{
    private PaymentMethodsResolverInterface $decorated;

    public function __construct(PaymentMethodsResolverInterface $decorated)
    {
        $this-&gt;decorated = $decorated;
    }

    public function getSupportedMethods(PaymentInterface $subject): array
    {
        return $this-&gt;decorated-&gt;getSupportedMethods($subject);
    }

    public function supports(PaymentInterface $subject): bool
    {
        return $this-&gt;decorated-&gt;supports($subject);
    }
}
</code></pre>
<p>And activate the decoration of service inside your <code>services.yaml</code></p>
<pre><code class="language-yaml">#config/services.yaml
services:
    # ...
    App\Resolver\PaymentMethodResolverDecorator:
        decorates: 'sylius.payment_methods_resolver'
</code></pre>
<p>You are now ready to integrate the  restriction !</p>
<p>The PaymentInterface passed as subject in getSupportedMethods contains the current order,
and the current order contains the customer.</p>
<p>So, if we want exclude the Offline Payment Method named &quot;End of the month&quot;
except for customers that belong to &quot;B2B&quot; group, we could code something like this:</p>
<pre><code class="language-php">//src/Resolver/PaymentMethodsResolverDecorator.php
&lt;?php 
//...
    private const B2B_PAYMENT_METHOD_CODE = 'end_of_month';
    private const B2B_GROUP_CODE = 'b2b';

    public function getSupportedMethods(PaymentInterface $subject): array
    {
        /** @var \App\Entity\Customer\CustomerGroup $customerGroup */
        $customerGroup = $subject-&gt;getOrder()-&gt;getCustomer()-&gt;getGroup();
        $customerGroupCode = null;
        if (null !== $customerGroup) {
            $customerGroupCode = $customerGroup-&gt;getCode();
        }
        
        $supportedMethods = $this-&gt;decorated-&gt;getSupportedMethods($subject);

        foreach ($supportedMethods as $index =&gt; $method) {
            if ($method-&gt;getCode() === self::B2B_PAYMENT_METHOD_CODE &amp;&amp; $customerGroupCode !== self::B2B_GROUP_CODE) {
                // We unset this payment method because customer don't belong to required group
                unset($supportedMethods[$index]);
            }
        }

        return $supportedMethods;
    }
//...
</code></pre>
<p>And that's it ! Navigate on your shop, with a non logged user or an user without group, and you'll never aware about the existence of
&quot;End Of Month&quot; payment method.</p>
<p>Conversely, all customers in the &quot;B2B&quot; group will be able to use it.</p>
<p>This method is great for a quick restriction, but it's not scalable, there is hardcoded code in source...</p>
<p>Let's see how to do it better.</p>
<h2><a id="content-2-the-clean-and-evolving-way" href="#content-2-the-clean-and-evolving-way" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>2. The clean and evolving way</h2>
<p>The best way should be something that is configurable form PaymentMethod Form. We should ideally have a CustomerGroup selector, and if no one is selected, the payment method is accessible for everyone.</p>
<p>So, we should alter the form to get the customer group selector.</p>
<p>The class responsible to render it is <code>Sylius\Bundle\PaymentBundle\Form\Type\PaymentMethodType</code></p>
<p>We could easily extend this form by <a href="https://symfony.com/doc/current/form/create_form_type_extension.html">creating a form type extension</a>, but there is some drawbacks.
First, we should add field on  PaymentMethod Entity, to carry information of customer groups, and alter view of the form to add this new field.
It's definitely not an evolving way, because we could lose template evolution by upgrading Sylius versions.</p>
<p>The Payment Methods offer a Gateway configuration, and everything is stored as a JSON inside the database, and the field already exist.</p>
<p>But, every payment plugin can create their own <a href="https://docs.sylius.com/en/latest/cookbook/payments/custom-payment-gateway.html">Gateway configuration</a>, so we have to do some black magic to add our field on every GatewayConfig.</p>
<p>Let's start by creating a GatewayConfigurationExtension :</p>
<pre><code class="language-php">// src/Form/Extension/GatewayConfigurationExtension.php
&lt;?php
    
declare(strict_types=1);

namespace App\Form\Extension;

use Symfony\Component\Form\AbstractTypeExtension;
use Symfony\Component\Form\FormBuilderInterface;

final class GatewayConfigurationExtension extends AbstractTypeExtension 
{
    public static function getExtendedTypes(): iterable
    {
        // TODO
        return [];
    }
    
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        // TODO
    }
}
</code></pre>
<p>Next, we want extend every GatewayConfigurationType provided by plugins.</p>
<p>As we can see, for a Form Extension, we should return the class name of extended types. We cannot provide them here, as we don't want to update this class each time we had a new plugin.</p>
<p>To handle that, we'll use the power of CompilerPass.</p>
<p>Let's modify this class first :</p>
<pre><code class="language-php">// src/Form/Extension/GatewayConfigurationExtension.php
&lt;?php
// ...

    public static array $extendedTypes = [];
    
    public static function getExtendedTypes(): iterable
    {
        return self::$extendedTypes;
    }

    public function setExtendedTypes(array $extendedTypes): void
    {
        self::$extendedTypes = $extendedTypes;
    }
</code></pre>
<p>We add a static property that carry all extendedTypes we want.</p>
<p>Then, the CompilerPass :</p>
<pre><code class="language-php">// src/CompilerPass/GatewayConfigurationExtensionCompilerPass.php
&lt;?php

declare(strict_types=1);

namespace App\CompilerPass;

use App\Form\Extension\GatewayConfigurationExtension;
use Sylius\Bundle\PayumBundle\Form\Type\GatewayConfigType;
use Symfony\Component\DependencyInjection\Compiler\CompilerPassInterface;
use Symfony\Component\DependencyInjection\ContainerBuilder;

final class GatewayConfigurationExtensionCompilerPass implements CompilerPassInterface
{
    public function process(ContainerBuilder $container)
    {
        $gatewayServices = $container-&gt;findTaggedServiceIds('sylius.gateway_configuration_type');
        $gatewayTypes = [GatewayConfigType::class];

        foreach ($gatewayServices as $service =&gt; $definitions) {
            $gatewayTypes[] = \get_class($container-&gt;get($service));
        }
        GatewayConfigurationExtension::$extendedTypes = $gatewayTypes;
        
        $definition = $container-&gt;getDefinition(GatewayConfigurationExtension::class);
        $definition-&gt;addMethodCall('setExtendedTypes', [$gatewaysTypes]);  
    }
}

</code></pre>
<p>Let me explain. We retrieve all services that are tagged as <code>sylius.gateway_configuration_type</code>. This is the tag to apply when plugins want to provide a custom configuration in their PaymentMethod.</p>
<p>We then retrieve the class name for all of these services.
And we set the static property with theses class names.</p>
<p>We also define a <code>methodCall</code> that call our function <code>setExtendedTypes</code>, this is used later when the container is compiled.</p>
<p>The hard coded  <code>GatewayConfigType::class</code> is here to let us handle payment methods without GatewayConfiguration provided. We'll see why in the form extension.</p>
<p>Then, we modify the <code>Kernel</code> class to register this CompilerPass :</p>
<pre><code class="language-php">// src/Kernel.php
&lt;?php
// ...
    protected function build(ContainerBuilder $container): void
    {
        $container-&gt;addCompilerPass(new GatewayConfigurationExtensionCompilerPass());
    }
</code></pre>
<p>At this point, we are still not ready to alter our forms.</p>
<p>In effect, if we try to build the container, an error is raised :</p>
<blockquote>
<p>The getExtendedTypes() method for service &quot;App\Form\Extension\GatewayConfigurationExtension&quot; does not return any extended types.</p>
</blockquote>
<p>It's because the other Compilerpass that register form extensions is processed before our own CompilerPass. To bypass this, we need more black magic !</p>
<p>Let's rework the <code>build</code> method in <code>Kernel</code>.</p>
<pre><code class="language-php">// src/Kernel.php
&lt;?php
// ...
    protected function build(ContainerBuilder $container): void
    {
        $passesBeforeOptimization = $container-&gt;getCompiler()-&gt;getPassConfig()-&gt;getBeforeOptimizationPasses();
        $passTypeToRegisterLater = [FormPass::class];
        $passToRegisterLater = [];

        foreach ($passesBeforeOptimization as $index =&gt; $compilerPass) {
            $compilerClass = \get_class($compilerPass);
            if (\in_array($compilerClass, $passTypeToRegisterLater, true)) {
                unset($passesBeforeOptimization[$index]);
                $passToRegisterLater[] = $compilerPass;
            }
        }
        $container-&gt;getCompiler()-&gt;getPassConfig()-&gt;setBeforeOptimizationPasses($passesBeforeOptimization);

        $container-&gt;addCompilerPass(new GatewayConfigurationExtensionCompilerPass());
        
        foreach ($passToRegisterLater as $compilerPass) {
            $container-&gt;addCompilerPass($compilerPass);
        }
    }
</code></pre>
<p>With this manipulation, we retrieve the CompilerPass responsible to register form extension (<code>FormPass</code>), and we unset it.
We then register our CompilerPass, and after that, we re-register CompilerPass unsetted.</p>
<p>We can now alter our forms. Go back to our Extension :</p>
<pre><code class="language-php">// src/Form/Extension/GatewayConfigurationExtension.php
&lt;?php
// ...
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $customerGroupFormOptions = [
            'entry_type' =&gt; CustomerGroupCodeChoiceType::class,
            'required' =&gt; false,
            'prototype' =&gt; true,
            'allow_add' =&gt; true,
            'allow_delete' =&gt; true,
            'by_reference' =&gt; false,
            'label' =&gt; 'Customer Groups',
        ];

        if ($builder-&gt;getName() === 'config') {
            // This form has a gateway config. Easy, just add field
            $builder-&gt;add('customer_group', CollectionType::class, $customerGroupFormOptions);
            return;
        }
    
        $builder-&gt;addEventListener(FormEvents::PRE_SET_DATA, static function (FormEvent $event) use ($customerGroupFormOptions) {
            /** @var \Symfony\Component\Form\Form $form */
            $form = $event-&gt;getForm();
            if ($form-&gt;has('config')) {
                // already handle (see above)
                return;
            }
            // We are on a PaymentMethod without GatewayConfig (like offline method). 
            // Let's add config key, and customer_group inside.
            $form-&gt;add('config', FormType::class);
            $configForm = $form-&gt;get('config');
            $configForm-&gt;add('customer_group', CollectionType::class, $customerGroupFormOptions);
        });
    }
</code></pre>
<p>And, VOILA ü•≥ We got customer groups selector inside our payment methods form.</p>
<p><img src="https://user-images.githubusercontent.com/3168281/111082452-ab978a80-8508-11eb-844c-b29e52caaaa9.png" alt="image" /></p>
<p>We can finally implement the logic into the Decorator described in part 1.</p>
<pre><code class="language-php">// src/Resolver/PaymentMethodsResolverDecorator.php
&lt;?php
// ...

    public function getSupportedMethods(PaymentInterface $subject): array
    {
        /** @var \App\Entity\Customer\CustomerGroup $customerGroup */
        $customerGroup = $subject-&gt;getOrder()-&gt;getCustomer()-&gt;getGroup();
        $customerGroupCode = null;
        if (null !== $customerGroup) {
            $customerGroupCode = $customerGroup-&gt;getCode();
        }

        $supportedMethods = $this-&gt;decorated-&gt;getSupportedMethods($subject);

        /** @var \App\Entity\Payment\PaymentMethod $method */
        foreach ($supportedMethods as $index =&gt; $method) {
            if (null === $method-&gt;getGatewayConfig()) {
                continue;
            }
            $config = $method-&gt;getGatewayConfig()-&gt;getConfig();
            if (!\array_key_exists('customer_group', $config) || $config['customer_group'] === []) {
                // No customer_groups setted on config
                continue;
            }

            if (!\in_array($customerGroupCode, $config['customer_group'], true)) {
                // CustomerGroup is not in configured groups for this payment method.
                // Unset it
                unset($supportedMethods[$index]);
            }
        }

        return $supportedMethods;
    }
</code></pre>
<h2><a id="content-3-conclusion" href="#content-3-conclusion" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>3. Conclusion</h2>
<p>We saw 2 methods to do the &quot;same thing&quot;.
The first part took me around 20 minutes to code.
The second part took me around 4 hours.</p>
<p>And we get the same result (for the final customer üôÉ)</p>
<p>You may decide to use one or other, or even a third method (share it with me if you have an other üòâ).<br />
Like usual, it depends of your need, and your Customer need.</p>
 ]]></content:encoded>
                <pubDate>Sun, 14 Mar 2021 20:04:26 +0000</pubDate>
                <author>Jib√© Barth</author>
            </item>
                                            <item>
                <title>[Sylius] Test all admin menu links ü¶¢</title>
                <description>Here is a simple gist for testing all admin menu links possible for a Sylius.
It asserts that all pages respond with a 200 Status code.
Feel free to add it in your test suite, to ensure you...
</description>
                <link>https://jib√©barth.fr/gist/87d11a489259049acc56b8254d411f62</link>
                <guid>https://jib√©barth.fr/gist/87d11a489259049acc56b8254d411f62</guid>
                <content:encoded><![CDATA[ <p>Here is a simple gist for testing all admin menu links possible for a Sylius.</p>
<p>It asserts that all pages respond with a <strong>200</strong> Status code.</p>
<p>Feel free to add it in your test suite, to ensure you never break an admin page üòâ</p>
 ]]></content:encoded>
                <pubDate>Thu, 10 Dec 2020 17:06:47 +0000</pubDate>
                <author>Jib√© Barth</author>
            </item>
                                            <item>
                <title>PestPHP on Symfony demo</title>
                <description>#

Nuno ask me to test his new test framework called Pest on a symfony application....
</description>
                <link>https://jib√©barth.fr/gist/c45838ede5cde76b2856530d32df7754</link>
                <guid>https://jib√©barth.fr/gist/c45838ede5cde76b2856530d32df7754</guid>
                <content:encoded><![CDATA[ <h1><a id="content-pestphp-on-symfony-demo" href="#content-pestphp-on-symfony-demo" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>PestPHP on Symfony demo</h1>
<p><img src="https://raw.githubusercontent.com/pestphp/art/master/readme.png" alt="pest logo" /></p>
<p><a href="http://github.com/nunomaduro">Nuno</a> ask me to test his new test framework called Pest on a symfony application.</p>
<p>I decided to <em>test</em> it on <a href="https://github.com/symfony/demo">Symfony Demo</a> and rewrite all included tests with Pest.</p>
<h2><a id="content-installation" href="#content-installation" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>Installation</h2>
<p>Just after cloning the Symfony demo repository, I followed this doc: <a href="https://pestphp.com/docs/installation/">https://pestphp.com/docs/installation/</a></p>
<p>I faced with two problems :</p>
<p>In composer.json, the php config is setted to version 7.2.9, so I got this error:</p>
<pre><code class="language-bash">  [InvalidArgumentException]                                                                         
  Package pestphp/pest at version  has a PHP requirement incompatible with your PHP version (7.2.9)  
</code></pre>
<p>Fixed it by removing this config in <code>composer.json</code></p>
<pre><code class="language-diff">     &quot;config&quot;: {
-        &quot;platform&quot;: {
-            &quot;php&quot;: &quot;7.2.9&quot;
-        },
</code></pre>
<p>Then, the minimum stability of the application is defined to &quot;stable&quot;. As pest require <code>nunomaduro/collision</code> in v5.0 and there is not stable version of this package yet, I add to change the minimum stability.</p>
<pre><code class="language-bash">composer config minimum-stability beta
</code></pre>
<h2><a id="content-analyse" href="#content-analyse" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>Analyse</h2>
<p>Launched phpunit on project:</p>
<pre><code class="language-bash">$ vendor/bin/phpunit 
PHPUnit 9.1.4 by Sebastian Bergmann and contributors.

Testing 
...............................................                   47 / 47 (100%)

Time: 00:09.030, Memory: 64.50 MB

OK (47 tests, 112 assertions)
</code></pre>
<p>47 tests, 112 assertions, I have to do the same.</p>
<pre><code class="language-bash">tests
‚îú‚îÄ‚îÄ bootstrap.php
‚îú‚îÄ‚îÄ Command
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ AddUserCommandTest.php
‚îú‚îÄ‚îÄ Controller
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ Admin
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ BlogControllerTest.php
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ BlogControllerTest.php
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ DefaultControllerTest.php
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ UserControllerTest.php
‚îú‚îÄ‚îÄ Form
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ DataTransformer
‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ TagArrayToStringTransformerTest.php
‚îî‚îÄ‚îÄ Utils
    ‚îî‚îÄ‚îÄ ValidatorTest.php
</code></pre>
<p>Sweet. Command tests use KernelTestCase, Controller tests use WebTestCase, and pure unit tests in Form and Utils.</p>
<p>Let's begin...</p>
<h2><a id="content-using-pest" href="#content-using-pest" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>Using Pest</h2>
<h3><a id="content-unit-tests" href="#content-unit-tests" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>Unit Tests</h3>
<p>The first test I want to rewrite was ValidatorTest. It seems to be the simpliest :</p>
<pre><code class="language-php">    public function testValidateUsername(): void
    {
        $test = 'username';

        $this-&gt;assertSame($test, $this-&gt;validator-&gt;validateUsername($test));
    }

    // ...
</code></pre>
<p>I move all <code>tests</code> folder in an other, and let's initialize a new <code>tests</code> folder for Pest.</p>
<p>Then, I create a new <code>ValidatorTest</code> in <code>Utils</code> with this :</p>
<pre><code class="language-php">&lt;?php

use App\Utils\Validator;

beforeEach(function () {
    $this-&gt;validator = new Validator();
});

/**
 * @covers Validator::validateUsername
 */
test('validate username', fn ($test) =&gt; assertSame($test, $this-&gt;validator-&gt;validateUsername($test)))
    -&gt;with(['test']);

test('validate empty username', fn ($value) =&gt; $this-&gt;validator-&gt;validateUsername($value))
    -&gt;with([null, ''])
    -&gt;throws(\Exception::class, 'The username can not be empty.');

test('validate username invalid', fn ($value) =&gt; $this-&gt;validator-&gt;validateUsername($value))
    -&gt;with(['INVALID', 'jib√©'])
    -&gt;throws(\Exception::class, 'The username must contain only lowercase latin characters and underscores.');

/**
 * @covers Validator::validatePassword
 */
test('validate password', fn ($test) =&gt; assertSame($test, $this-&gt;validator-&gt;validatePassword($test)))
    -&gt;with(['password']);

test('validate empty password', fn ($value) =&gt; $this-&gt;validator-&gt;validatePassword($value))
    -&gt;with([null, ''])
    -&gt;throws(\Exception::class, 'The password can not be empty.');

test('validate invalid password', fn ($value) =&gt; $this-&gt;validator-&gt;validatePassword($value))
    -&gt;with(['12345'])
    -&gt;throws(\Exception::class, 'The password must be at least 6 characters long.');

/**
 * @covers Validator::validateEmail
 */
test('validate email', fn ($test) =&gt; assertSame($test, $this-&gt;validator-&gt;validateEmail($test)))
    -&gt;with(['@', 'contact@example.net']);

test('validate empty email', fn ($value) =&gt; $this-&gt;validator-&gt;validateEmail($value))
    -&gt;with([null, ''])
    -&gt;throws(\Exception::class, 'The email can not be empty.');

test('validate invalid email', fn ($value) =&gt; $this-&gt;validator-&gt;validateEmail($value))
    -&gt;with(['invalid', 'example.net'])
    -&gt;throws(\Exception::class, 'The email should look like a real email.');

/**
 * @covers Validator::validateFullName
 */
test('validate fullname', fn ($test) =&gt; assertSame($test, $this-&gt;validator-&gt;validateFullName($test)))
    -&gt;with(['Full Name']);

test('validate empty fullname', fn ($value) =&gt; $this-&gt;validator-&gt;validateFullName($value))
    -&gt;with([null, ''])
    -&gt;throws(\Exception::class, 'The full name can not be empty.');
</code></pre>
<p>Output is nice üëå :</p>
<p><img src="https://user-images.githubusercontent.com/3168281/81816681-fa147b00-952b-11ea-84c9-220d752ec045.png" alt="first output with pest" /></p>
<p>Comparing to original test, I gain ~ 40LOC. I added the <code>@covers</code> annotations, to aerate a little the code, but it's not required.</p>
<p>One thing strange is the <code>  ‚úì validate username invalid with (' i n v a l i d')</code>. I passed <code>INVALID</code> data, and it seems to be transformed. However, after a check, the correct value is passed, seems to be only when display results.
Don't know if it's phpunit related or pest.</p>
<p>The second Test I migrate is the <code>TagArrayToStringTransformerTest</code>. It's interresting because it use Mock. Let's see how it can be implemented with Pest.</p>
<p>On the original test, the class had the following method :</p>
<pre><code class="language-php">    private function getMockedTransformer(array $findByReturnValues = []): TagArrayToStringTransformer
    {
        $tagRepository = $this-&gt;getMockBuilder(TagRepository::class)
            -&gt;disableOriginalConstructor()
            -&gt;getMock();
        $tagRepository-&gt;expects($this-&gt;any())
            -&gt;method('findBy')
            -&gt;willReturn($findByReturnValues);

        return new TagArrayToStringTransformer($tagRepository);
    }
</code></pre>
<p>I didn't find a way to register such a function with $this in Pest. However, I add a function in my test file, and adding a TestCase argument :</p>
<pre><code class="language-php">function getMockedTransformer(\PHPUnit\Framework\TestCase $test, array $findByReturnValues = []): TagArrayToStringTransformer
{
    $tagRepository = $test-&gt;getMockBuilder(TagRepository::class)
        -&gt;disableOriginalConstructor()
        -&gt;getMock();
    $tagRepository-&gt;expects($test-&gt;any())
        -&gt;method('findBy')
        -&gt;willReturn($findByReturnValues);

    return new TagArrayToStringTransformer($tagRepository);
}
</code></pre>
<p>Then, I can call it by adding $this in parameter :</p>
<pre><code class="language-php">it('create the right amount of tag', function () {
    $tags = getMockedTransformer($this)-&gt;reverseTransform('Hello, Demo, How');

    assertCount(3, $tags);
    assertSame('Hello', $tags[0]-&gt;getName());
});
</code></pre>
<p>Maybe this function should be added in a Trait, and use the <a href="https://pestphp.com/docs/underlying-test-case/"><code>uses</code> feature of Pest</a>.</p>
<p>Then the transform is pretty simple:</p>
<pre><code class="language-php">&lt;?php

use App\Entity\Tag;
use App\Form\DataTransformer\TagArrayToStringTransformer;
use App\Repository\TagRepository;

it('create the right amount of tag', function () {
    $tags = getMockedTransformer($this)-&gt;reverseTransform('Hello, Demo, How');

    assertCount(3, $tags);
    assertSame('Hello', $tags[0]-&gt;getName());
});

it('create the right amount of tags with too many commas', function () {
    $transformer = getMockedTransformer($this);

    assertCount(3, $transformer-&gt;reverseTransform('Hello, Demo,, How'));
    assertCount(3, $transformer-&gt;reverseTransform('Hello, Demo, How,'));
});

it('trim names' , function () {
    $tags = getMockedTransformer($this)-&gt;reverseTransform('   Hello   ');
    assertSame('Hello', $tags[0]-&gt;getName());
});

test('duplicate names', function () {
    $tags = getMockedTransformer($this)-&gt;reverseTransform('Hello, Hello, Hello');

    assertCount(1, $tags);
});

it('uses already defined tags', function () {
    $persistedTags = [
        createTag('Hello'),
        createTag('World'),
    ];
    $tags = getMockedTransformer($this, $persistedTags)-&gt;reverseTransform('Hello, World, How, Are, You');

    assertCount(5, $tags);
    assertSame($persistedTags[0], $tags[0]);
    assertSame($persistedTags[1], $tags[1]);
});

test('transform', function () {
    $persistedTags = [
        createTag('Hello'),
        createTag('World'),
    ];
    $transformed = getMockedTransformer($this)-&gt;transform($persistedTags);

    assertSame('Hello,World', $transformed);
});

function getMockedTransformer(\PHPUnit\Framework\TestCase $test, array $findByReturnValues = []): TagArrayToStringTransformer
{
    $tagRepository = $test-&gt;getMockBuilder(TagRepository::class)
        -&gt;disableOriginalConstructor()
        -&gt;getMock();
    $tagRepository-&gt;expects($test-&gt;any())
        -&gt;method('findBy')
        -&gt;willReturn($findByReturnValues);

    return new TagArrayToStringTransformer($tagRepository);
}

function createTag(string $name): Tag
{
    $tag = new Tag();
    $tag-&gt;setName($name);

    return $tag;
}
</code></pre>
<p>Let's see how it handle our lovely <code>KernelTestCase</code></p>
<h3><a id="content-integration-tests" href="#content-integration-tests" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>Integration Tests</h3>
<p>Following docs, we can define the base <code>TestCase</code> in a <code>tests/Pest.php</code> file by directory.
So, for <code>Command</code> folder, I want it use <code>KernelTestCase</code></p>
<pre><code class="language-php">// tests/Pest.php

&lt;?php

use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;

uses(KernelTestCase::class)-&gt;in('Command');
</code></pre>
<p>For this one, I tried to create a Trait for the <code>executeCommand</code> :</p>
<pre><code class="language-php">// tests/Command/ExecuteAddUserCommandTrait.php
&lt;?php

namespace App\Tests\Command;

use App\Command\AddUserCommand;
use Symfony\Bundle\FrameworkBundle\Console\Application;
use Symfony\Component\Console\Tester\CommandTester;

trait ExecuteAddUserCommandTrait
{
    private function executeCommand(array $arguments, array $inputs = []): void
    {
        self::bootKernel();

        // this uses a special testing container that allows you to fetch private services
        $command = self::$container-&gt;get(AddUserCommand::class);
        $command-&gt;setApplication(new Application(self::$kernel));

        $commandTester = new CommandTester($command);
        $commandTester-&gt;setInputs($inputs);
        $commandTester-&gt;execute($arguments);
    }
}
</code></pre>
<p>and an other for custom assertion <code>assertUserCreated</code> :</p>
<pre><code class="language-php">&lt;?php

namespace App\Tests\Command;

use App\Repository\UserRepository;

trait UserCreationAssertion
{
    private $userData = [
        'username' =&gt; 'chuck_norris',
        'password' =&gt; 'foobar',
        'email' =&gt; 'chuck@norris.com',
        'full-name' =&gt; 'Chuck Norris',
    ];

    private function assertUserCreated(bool $isAdmin): void
    {
        $container = self::$container;

        /** @var \App\Entity\User $user */
        $user = $container-&gt;get(UserRepository::class)-&gt;findOneByEmail($this-&gt;userData['email']);
        $this-&gt;assertNotNull($user);

        $this-&gt;assertSame($this-&gt;userData['full-name'], $user-&gt;getFullName());
        $this-&gt;assertSame($this-&gt;userData['username'], $user-&gt;getUsername());
        $this-&gt;assertTrue($container-&gt;get('security.password_encoder')-&gt;isPasswordValid($user, $this-&gt;userData['password']));
        $this-&gt;assertSame($isAdmin ? ['ROLE_ADMIN'] : ['ROLE_USER'], $user-&gt;getRoles());
    }
}

</code></pre>
<p>Then, I add a use for theses trait in the <code>AddUserCommandTest</code>:</p>
<pre><code class="language-php">&lt;?php

namespace App\Tests\Command;

uses(UserCreationAssertion::class, ExecuteAddUserCommandTrait::class);
</code></pre>
<p>Let's transform other tests..</p>
<p>The original test use a DataProvider, so I created a dataset for it :</p>
<pre><code class="language-php">dataset('isAdmin', static function () {
    yield [false];
    yield [true];
});
</code></pre>
<p>And there is the full test :</p>
<pre><code class="language-php">&lt;?php

namespace App\Tests\Command;

uses(UserCreationAssertion::class, ExecuteAddUserCommandTrait::class);

dataset('isAdmin', static function () {
    yield [false];
    yield [true];
});

it('create user in non interactive mode', function (bool $isAdmin) {
    $input = $this-&gt;userData;
    if ($isAdmin) {
        $input['--admin'] = 1;
    }
    $this-&gt;executeCommand($input);
    $this-&gt;assertUserCreated($isAdmin);
})-&gt;with('isAdmin');

it('create user in interactive mode', function (bool $isAdmin) {
    $this-&gt;executeCommand(
        // these are the arguments (only 1 is passed, the rest are missing)
        $isAdmin ? ['--admin' =&gt; 1] : [],
        // these are the responses given to the questions asked by the command
        // to get the value of the missing required arguments
        array_values($this-&gt;userData)
    );

    $this-&gt;assertUserCreated($isAdmin);
})-&gt;with('isAdmin');

beforeEach(function () {
    exec('stty 2&gt;&amp;1', $output, $exitcode);
    $isSttySupported = 0 === $exitcode;

    if ('Windows' === PHP_OS_FAMILY || !$isSttySupported) {
        $this-&gt;markTestSkipped('`stty` is required to test this command.');
    }
});
</code></pre>
<h3><a id="content-functional-tests" href="#content-functional-tests" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>Functional tests</h3>
<p>I call functionnal tests the tests which call a controller via a Client. To do this, we use in Symfony the <code>WebTestCase</code>.</p>
<p>Adding it in <code>tests/Pest.php</code> for all our controllers tests.</p>
<pre><code class="language-php">// tests/Pest.php

// ...

uses(WebTestCase::class)-&gt;in('Controller');
</code></pre>
<p>For the <code>DefaultControllerTest</code>, it's pretty quick:</p>
<pre><code class="language-php">&lt;?php

use App\Entity\Post;
use Symfony\Component\HttpFoundation\Response;

test('public urls', function (string $url) {
    $client = static::createClient();
    $client-&gt;request('GET', $url);

    $this-&gt;assertResponseIsSuccessful(sprintf('The %s public URL loads correctly.', $url));
})-&gt;with(static function (): ?\Generator {
    yield ['/'];
    yield ['/en/blog/'];
    yield ['/en/login'];
});

test('public blog posts', function () {
    $client = static::createClient();
    // the service container is always available via the test client
    $blogPost = $client-&gt;getContainer()-&gt;get('doctrine')-&gt;getRepository(Post::class)-&gt;find(1);
    $client-&gt;request('GET', sprintf('/en/blog/posts/%s', $blogPost-&gt;getSlug()));

    $this-&gt;assertResponseIsSuccessful();
});

test('secure urls', function ($url) {
    $client = static::createClient();
    $client-&gt;request('GET', $url);

    $this-&gt;assertResponseRedirects(
        'http://localhost/en/login',
        Response::HTTP_FOUND,
        sprintf('The %s secure URL redirects to the login form.', $url)
    );
})-&gt;with(static function (): ?\Generator {
    yield ['/en/admin/post/'];
    yield ['/en/admin/post/new'];
    yield ['/en/admin/post/1'];
    yield ['/en/admin/post/1/edit'];
});
</code></pre>
<p>For BlogControllerTest and UserControllerTest, same. Just copy paste content of tests into Pest Style :</p>
<pre><code class="language-php">// ...
it('can post new comment', function () {
    $client = static::createClient([], [
        'PHP_AUTH_USER' =&gt; 'john_user',
        'PHP_AUTH_PW' =&gt; 'kitten',
    ]);
    $client-&gt;followRedirects();

    // Find first blog post
    $crawler = $client-&gt;request('GET', '/en/blog/');
    $postLink = $crawler-&gt;filter('article.post &gt; h2 a')-&gt;link();

    $client-&gt;click($postLink);
    $crawler = $client-&gt;submitForm('Publish comment', [
        'comment[content]' =&gt; 'Hi, Symfony!',
    ]);

    $newComment = $crawler-&gt;filter('.post-comment')-&gt;first()-&gt;filter('div &gt; p')-&gt;text();

    $this-&gt;assertSame('Hi, Symfony!', $newComment);
});
</code></pre>
<p>For <code>Admin/BlogControllerTest</code>, there was an other private method in original class, I declared it as simple function here :</p>
<pre><code class="language-php">&lt;?php

use App\Repository\PostRepository;
use Symfony\Component\HttpFoundation\Response;

it('deny access for regular user', function ($httpMethod, $url) {
    $client = static::createClient([], [
        'PHP_AUTH_USER' =&gt; 'john_user',
        'PHP_AUTH_PW' =&gt; 'kitten',
    ]);

    $client-&gt;request($httpMethod, $url);

    $this-&gt;assertResponseStatusCodeSame(Response::HTTP_FORBIDDEN);
})-&gt;with(static function(): \Generator {
    yield ['GET', '/en/admin/post/'];
    yield ['GET', '/en/admin/post/1'];
    yield ['GET', '/en/admin/post/1/edit'];
    yield ['POST', '/en/admin/post/1/delete'];
});


it('has admin backend home page', function () {
    $client = static::createClient([], [
        'PHP_AUTH_USER' =&gt; 'jane_admin',
        'PHP_AUTH_PW' =&gt; 'kitten',
    ]);
    $client-&gt;request('GET', '/en/admin/post/');

    $this-&gt;assertResponseIsSuccessful();
    $this-&gt;assertSelectorExists(
        'body#admin_post_index #main tbody tr',
        'The backend homepage displays all the available posts.'
    );
});

it('can create new post', function () {
    $postTitle = 'Blog Post Title '.mt_rand();
    $postSummary = generateRandomString(255);
    $postContent = generateRandomString(1024);

    $client = static::createClient([], [
        'PHP_AUTH_USER' =&gt; 'jane_admin',
        'PHP_AUTH_PW' =&gt; 'kitten',
    ]);
    $client-&gt;request('GET', '/en/admin/post/new');
    $client-&gt;submitForm('Create post', [
        'post[title]' =&gt; $postTitle,
        'post[summary]' =&gt; $postSummary,
        'post[content]' =&gt; $postContent,
    ]);

    $this-&gt;assertResponseRedirects('/en/admin/post/', Response::HTTP_FOUND);

    /** @var \App\Entity\Post $post */
    $post = self::$container-&gt;get(PostRepository::class)-&gt;findOneByTitle($postTitle);
    $this-&gt;assertNotNull($post);
    $this-&gt;assertSame($postSummary, $post-&gt;getSummary());
    $this-&gt;assertSame($postContent, $post-&gt;getContent());
});

it('can duplicate post', function () {
    $postTitle = 'Blog Post Title '.mt_rand();
    $postSummary = generateRandomString(255);
    $postContent = generateRandomString(1024);

    $client = static::createClient([], [
        'PHP_AUTH_USER' =&gt; 'jane_admin',
        'PHP_AUTH_PW' =&gt; 'kitten',
    ]);
    $crawler = $client-&gt;request('GET', '/en/admin/post/new');
    $form = $crawler-&gt;selectButton('Create post')-&gt;form([
        'post[title]' =&gt; $postTitle,
        'post[summary]' =&gt; $postSummary,
        'post[content]' =&gt; $postContent,
    ]);
    $client-&gt;submit($form);

    // post titles must be unique, so trying to create the same post twice should result in an error
    $client-&gt;submit($form);

    $this-&gt;assertSelectorTextSame('form .form-group.has-error label', 'Title');
    $this-&gt;assertSelectorTextContains('form .form-group.has-error .help-block', 'This title was already used in another blog post, but they must be unique.');
});

it('can show post in admin', function () {
    $client = static::createClient([], [
        'PHP_AUTH_USER' =&gt; 'jane_admin',
        'PHP_AUTH_PW' =&gt; 'kitten',
    ]);
    $client-&gt;request('GET', '/en/admin/post/1');

    $this-&gt;assertResponseIsSuccessful();
});

it('can edit post', function () {
    $newBlogPostTitle = 'Blog Post Title '.mt_rand();

    $client = static::createClient([], [
        'PHP_AUTH_USER' =&gt; 'jane_admin',
        'PHP_AUTH_PW' =&gt; 'kitten',
    ]);
    $client-&gt;request('GET', '/en/admin/post/1/edit');
    $client-&gt;submitForm('Save changes', [
        'post[title]' =&gt; $newBlogPostTitle,
    ]);

    $this-&gt;assertResponseRedirects('/en/admin/post/1/edit', Response::HTTP_FOUND);

    /** @var \App\Entity\Post $post */
    $post = self::$container-&gt;get(PostRepository::class)-&gt;find(1);
    $this-&gt;assertSame($newBlogPostTitle, $post-&gt;getTitle());
});

it('can delete post', function () {
    $client = static::createClient([], [
        'PHP_AUTH_USER' =&gt; 'jane_admin',
        'PHP_AUTH_PW' =&gt; 'kitten',
    ]);
    $crawler = $client-&gt;request('GET', '/en/admin/post/1');
    $client-&gt;submit($crawler-&gt;filter('#delete-form')-&gt;form());

    $this-&gt;assertResponseRedirects('/en/admin/post/', Response::HTTP_FOUND);

    $post = self::$container-&gt;get(PostRepository::class)-&gt;find(1);
    $this-&gt;assertNull($post);
});

function generateRandomString(int $length): string
{
    $chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';

    return mb_substr(str_shuffle(str_repeat($chars, ceil($length / mb_strlen($chars)))), 1, $length);
}

</code></pre>
<h2><a id="content-final-thoughts" href="#content-final-thoughts" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>Final thoughts</h2>
<p>Basculating all tests from Symfony Demo is pretty simple and everything works üéâ
At the end, I have 54 tests, so seven more of the original test suite. It's because the <code>-&gt;with()</code> function of Pest is really cool, and I added more value in it while rewriting tests.</p>
<p>I also liked <code>-&gt;throw()</code> function, to catch exception and messages.</p>
<p>But it's difficult, for me, to not having real context on <code>$this</code>. Using PHPStorm, I don't have any autocomplete on $this.</p>
<p>Also, there is no &quot;live&quot; progress on tests. Pest display results file by file, not &quot;test&quot; by &quot;test&quot;. When using the Client, it's a bit slow to get results.</p>
<p><img src="https://user-images.githubusercontent.com/3168281/81816556-c6395580-952b-11ea-95ef-eb1e49935cd5.gif" alt="pest demo" /></p>
<p>Pest is still young, but it's promising !</p>
<p>Congrat Nuno for this awesome work and thanks to let me try it üëç !</p>
 ]]></content:encoded>
                <pubDate>Wed, 13 May 2020 13:11:55 +0000</pubDate>
                <author>Jib√© Barth</author>
            </item>
                                            <item>
                <title>üá´üá∑  Gnome / Chrome / Dark mode</title>
                <description>Sur GNOME, j'ai ajout√© l'extension DayNight qui permet de passer d'un theme sombre a light d'un clic.
Contrairement a Firefox, chrome ne pr...
</description>
                <link>https://jib√©barth.fr/gist/05cb7e0fd510525498b0528551a12409</link>
                <guid>https://jib√©barth.fr/gist/05cb7e0fd510525498b0528551a12409</guid>
                <content:encoded><![CDATA[ <p>Sur GNOME, j'ai ajout√© l'extension <a href="https://extensions.gnome.org/extension/2302/daynight/">DayNight</a> qui permet de passer d'un theme sombre a light d'un clic.</p>
<p>Contrairement a Firefox, chrome ne prend pas en compte le theme mode de l'utilisateur √† la vol√©e.</p>
<p>Chrome n'interprete pas le color-prefers-scheme correctement, m√™me si le theme est configur√© sur Dark.</p>
<p>Pour lancer chrome en mode dark,</p>
<pre><code class="language-bash">  google-chrome-stable --force-dark-mode
</code></pre>
<p>Mais dans ce cas pr√©cis, on ne tiens toujours pas compte du theme utilisateur, le color-prefers-scheme est bien sett√© sur dark, meme si j'utilise un theme light.</p>
<p>Pour g√©rer √ßa j'ai rajout√© dans mon fichier <code>bash_functions.sh</code> la fonction suivante :</p>
<pre><code class="language-bash">isDarkTheme() {
        theme=&quot;$(gsettings get org.gnome.desktop.interface gtk-theme)&quot;;
        if [[ &quot;$theme&quot; =~ &quot;dark&quot; ]]; then
                return;
        fi
        false;
}
</code></pre>
<p>Puis, j'ai copi√© le fichier .desktop pour lancer google dans mon dossier personnel :</p>
<pre><code class="language-bash">cp /usr/share/applications/google-chrome.desktop ~/.local/share/applications/google-chrome.desktop
</code></pre>
<p>Enfin, j'ai alt√©r√© les <code>Exec</code> dedans pour utiliser <code>--force-dark-mode</code> en fonction du theme courant:</p>
<pre><code class="language-ini"># ~/.local/share/applications/google-chrome.desktop

#Exec=/usr/bin/google-chrome-stable %U 
Exec=bash -c 'source bash_functions.sh;if isDarkTheme; then /usr/bin/google-chrome-stable %U --force-dark-mode; else /usr/bin/google-chrome-stable %U; fi;'
</code></pre>
<blockquote>
<p>Inconv√©nient : Si je change de th√®me, je suis tout de m√™me oblig√© de relancer chrome pour appliquer changer en fonction le dark-mode.</p>
</blockquote>
 ]]></content:encoded>
                <pubDate>Sat, 18 Apr 2020 11:29:31 +0000</pubDate>
                <author>Jib√© Barth</author>
            </item>
                                                                        <item>
                <title>üá´üá∑ Changer la suite de fixtures par d√©faut sous Sylius</title>
                <description></description>
                <link>https://www.synolia.com/synolab/back-office/changer-la-suite-de-fixtures-par-defaut-sous-sylius/</link>
                <guid>https://www.synolia.com/synolab/back-office/changer-la-suite-de-fixtures-par-defaut-sous-sylius/</guid>
                <content:encoded><![CDATA[  ]]></content:encoded>
                <pubDate>Wed, 01 Apr 2020 12:00:00 +0000</pubDate>
                <author>Jib√© Barth</author>
            </item>
                                            <item>
                <title> ‚ö°Recreate Github CLI OAuth feature in a Symfony command ‚ö°</title>
                <description>#
Github recently released a CLI tool to manage issues and PR directly from your terminal.
As I work on some open source projects, I downloaded it to give a try.
And...
</description>
                <link>https://jib√©barth.fr/gist/b225269c02a1012ebf8c11eb4d526eb7</link>
                <guid>https://jib√©barth.fr/gist/b225269c02a1012ebf8c11eb4d526eb7</guid>
                <content:encoded><![CDATA[ <h1><a id="content-recreate-github-cli-oauth-feature-in-a-symfony-command-" href="#content-recreate-github-cli-oauth-feature-in-a-symfony-command-" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>‚ö°Recreate Github CLI OAuth feature in a Symfony command ‚ö°</h1>
<p>Github recently released a <a href="https://cli.github.com/">CLI tool</a> to manage issues and PR directly from your terminal.
As I work on some open source projects, I downloaded it to give a try.</p>
<p>And at first launch, the CLI ask to connect by using OAuth. It propose to press &quot;Enter&quot; to open github.com in my browser, and catch correctly the access_token.</p>
<p>That .. blown my mind ü§Ø I didn't expect we can connect through terminal like this.
So, as it's open source, I dived into the <a href="https://github.com/cli/cli">code source</a>.</p>
<p>There is two main feature to handle authorization like this.
First, you have to launch your browser to a specified url. Then, you have to handle response on redirected uri.</p>
<p>Let's see how to reproduce this into a Symfony Application.</p>
<h2><a id="content-initialization" href="#content-initialization" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>Initialization</h2>
<p>Create a symfony project from skeleton, and create a command into it.</p>
<pre><code class="language-bash">composer create-project symfony/skeleton cli-oauth
cd cli-oauth
composer req maker
php bin/console make:command app:oauth-login
</code></pre>
<p>Clean a little the command, to get ready to work :</p>
<pre><code class="language-php">// src/Command/OAuthLoginCommand.php
&lt;?php

declare(strict_types=1);

namespace App\Command;

use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Style\SymfonyStyle;

final class OauthLoginDemoCommand extends Command
{
    protected static $defaultName = 'app:oauth-login-demo';

    protected function configure()
    {
        $this
            -&gt;setDescription('Login via OAuth')
        ;
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $io = new SymfonyStyle($input, $output);
        $io-&gt;note('Authentication Required');
       
        // TODO

        $io-&gt;success('You are successfully connected.');

        return 0;
    }
}
</code></pre>
<h2><a id="content-open-browser" href="#content-open-browser" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>Open browser</h2>
<p>To open browser from Terminal, we could launch it via a Process.</p>
<pre><code class="language-bash">composer require symfony/process
</code></pre>
<p>Then, if I use Google Chrome, I can launch it like this:</p>
<pre><code class="language-php">use Symfony\Component\Process\Process;
$process = new Process(['google-chrome', 'http://github.com']);
$process-&gt;run();
</code></pre>
<p>It's works, but not anyone use Google Chrome. We have to use default browser for user.
To do this, we have to check if a <code>BROWSER</code> is in environnement variables, or fallback into default system mechanism.</p>
<p>Let's create a Browser class:</p>
<pre><code class="language-php">//src/Browser.php
&lt;?php

declare(strict_types=1);

namespace App;

use Symfony\Component\Process\Process;

final class Browser
{
    public function open(string $url): void
    {
        // Validate URL
        if (false === filter_var($url, FILTER_VALIDATE_URL)) {
            throw new \InvalidArgumentException(sprintf('&quot;%s&quot; is not a valid URL', $url));
        }
        
        $process = $this-&gt;getCommand($url);
        $process-&gt;run();
    }
    
    private function getCommand(string $url): Process
    {
        $browser = getenv('BROWSER');
        if ($browser) {
            return new Process([$browser, $url]);
        }
        return $this-&gt;systemFallBack($url);
    }
    
    private function systemFallBack($url): Process
    {
        switch (PHP_OS_FAMILY) {
            case 'Darwin':
                return new Process(['open', $url]);
            case 'Windows':
                return new Process(['cmd', '/c', 'start', $url]);
            default:
                return new Process(['xdg-open', $url]);
        }
    }
}
</code></pre>
<p>And call it from our command :</p>
<pre><code class="language-php">//src/Command/OAuthLogin.php
// ...
    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        // ...
        $io-&gt;note('Authentication Required');
        $io-&gt;ask('Press enter to open github.com in your browser...');
        (new Browser())-&gt;open('http://github.com')
        // TODO
        // ...
</code></pre>
<p>The first feature is implemented. Let's see how we can retrieve access_token !</p>
<h2><a id="content-create-a-local-webserver-on-demand" href="#content-create-a-local-webserver-on-demand" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>Create a local WebServer on demand</h2>
<p>As we can see when using [Github CLI], the OAuth flow redirect to <code>http://localhost:custom_port</code></p>
<p>So we need to create a WebServer on localhost, to be able to catch code.</p>
<p>To do this, we'll use <code>reactphp</code>:</p>
<pre><code class="language-bash">composer require react/http
</code></pre>
<p>And let's create a basic WebServer class:</p>
<pre><code class="language-php">//src/OAuth/WebServer.php
&lt;?php

declare(strict_types=1);

namespace App\OAuth;

use Psr\Http\Message\ServerRequestInterface;
use React\EventLoop\Factory;
use React\Http\Response;
use React\Http\Server as HttpServer;
use React\Socket\Server as SocketServer;

final class WebServer
{
    public function launch(): void
    {
        $loop = Factory::create();
        $socket = new SocketServer('127.0.0.1:8000', $loop);
        $http = new HttpServer(
            static function(ServerRequestInterface $request) {
                // TODO handle $request
                return new Response(200, ['content-type' =&gt; 'text/plain'], 'Hello World');
            }
        );
        $http-&gt;listen($socket);
        $loop-&gt;run();
    }
}
</code></pre>
<p>Use it together with our new Browser class in the command:</p>
<pre><code class="language-php">// src/Command/OAuthLoginCommand.php
// ...
    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        // ...
        $io-&gt;note('Authentication Required');
        $io-&gt;ask('Press enter to open github.com in your browser...');
        $browser = new Browser();
        $server = new Webserver();
        $browser-&gt;open('http://localhost:8000');
        $server-&gt;launch();
</code></pre>
<p>By launching command, a new tab should open in the browser, and display &quot;Hello World&quot;.</p>
<p>Congrats, you can now implement your OAuth logic !</p>
<h2><a id="content-handle-oauth-logic-with-github" href="#content-handle-oauth-logic-with-github" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>Handle OAuth logic with Github</h2>
<p>Let's begin by <a href="https://developer.github.com/apps/building-oauth-apps">create a new OAuth app on github</a>. In app settings, set <code>http://localhost/</code> for <strong>Authorization callback URL</strong>.</p>
<p>Add credentials into the <code>.env</code> file</p>
<pre><code class="language-ini">#.env
#...
OAUTH_GITHUB_ID=githubappid
OAUTH_GITHUB_SECRET=githubappsecret
</code></pre>
<p>Then, require <code>league/oauth2-client</code> and <code>league/oauth2-github</code> :</p>
<pre><code class="language-bash">composer require league/oauth2-client league/oauth2-github
</code></pre>
<p>And create a service to configure the Github provider:</p>
<pre><code class="language-yaml"># config/services.yaml

services:
    #...
    League\OAuth2\Client\Provider\Github:
        class: League\OAuth2\Client\Provider\Github
        arguments:
            - {clientId: '%env(OAUTH_GITHUB_ID)%', clientSecret: '%env(OAUTH_GITHUB_SECRET)%'}
</code></pre>
<p>When github will redirect you on your custom WebServer, we need to intercept request to retrieve information. We could do this by add a callable in function <code>launch</code>:</p>
<pre><code class="language-php">// src/OAuth/WebServer.php
// ...

    public function launch(callable $callback): void
    {
        // ...
        $http = new HttpServer(
            static function(ServerRequestInterface $request) use ($callback) {
                $callback($request);
                // stop loop after return response
                $loop-&gt;futureTick(fn() =&gt; $loop-&gt;stop());
                
                return new Response(200, ['content-type' =&gt; 'text/plain'], 'You can now close this tab.');
            }
        );
        // ...
    }
</code></pre>
<p>Back to our OAuthLoginCommand, inject the Github Provider, create a callback, and pass the good url to the browser:</p>
<pre><code class="language-php">// src/Command/OAuthLoginCommand.php
// ...
use League\OAuth2\Client\Provider\Github;
// ...
    private Github $github;
	private string $accessToken;    

    public function __construct(Github $github)
    {
        $this-&gt;github = $github;
    }
    // ...
    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        // ...
        $io-&gt;note('Authentication Required');
        $io-&gt;ask('Press enter to open github.com in your browser...');
        // github authorization url
            $githubUrl = $this-&gt;github-&gt;getAuthorizationUrl(['redirect_uri' =&gt; 'http://localhost:8000']);
            $callback = function (ServerRequestInterface $request) {
            $code = $request-&gt;getQueryParams()['code'];
            $accessToken = $this-&gt;github-&gt;getAccessToken('authorization_code', [
                'code' =&gt; $code
            ]);
            $this-&gt;accessToken = $accessToken-&gt;getToken();
        };
        
        (new Browser())-&gt;open($githubUrl);
        (new WebServer())-&gt;launch($callback);

        if (null === $this-&gt;accessToken) {
            throw new \LogicException('Unable to fetch accessToken');
        }
        
        // Now you should have the accessToken. 
        // Retrieve resourceOwner and display it
        $token = new AccessToken(['access_token' =&gt; $this-&gt;accessToken]);
        $user = $this-&gt;github-&gt;getResourceOwner($token);
		
        $io-&gt;success('You are successfully connected. Welcome ' . $user-&gt;getNickName());
    }

</code></pre>
<p>You should now have a functionnal flow:</p>
<p><img src="https://user-images.githubusercontent.com/3168281/74605115-bb059380-50bc-11ea-84ae-50c9e1d372b0.gif" alt="cli-oauth" /></p>
<h2><a id="content-going-further" href="#content-going-further" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>Going further</h2>
<p>I'll stop here for explanation.
But, you can go further. You can find below my source code, a way to manage multiple oauth-providers, and to use a Symfony Controller Route for a better rendering on redirect.</p>
<p>Note also that there is not storing for accessToken, maybe we should store it somewhere and reuse it instead of reopen browser each time we launch command.</p>
<p>Thanks for reading ü§ó</p>
 ]]></content:encoded>
                <pubDate>Sun, 16 Feb 2020 13:00:27 +0000</pubDate>
                <author>Jib√© Barth</author>
            </item>
                                            <item>
                <title>üá´üá∑ API Platform, Oauth, &amp; Swagger UI</title>
                <description>#Api Platform, OAuth &amp; Swagger
Aujourd'hui, nous allons voir comment utiliser une authentification OAuth, pour notre projet API Platform, √† travers Swagger UI.
Cela nous permettra d'activer plus...
</description>
                <link>https://jib√©barth.fr/gist/9f453bdb14c5565baa7a20f35e23f2bc</link>
                <guid>https://jib√©barth.fr/gist/9f453bdb14c5565baa7a20f35e23f2bc</guid>
                <content:encoded><![CDATA[ <h1><a id="content-api-platform-oauth--swagger" href="#content-api-platform-oauth--swagger" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>Api Platform, OAuth &amp; Swagger</h1>
<p>Aujourd'hui, nous allons voir comment utiliser une authentification OAuth, pour notre projet API Platform, √† travers Swagger UI.</p>
<p>Cela nous permettra d'activer plusieurs services OAuth, tels que Google, Github, ou encore Facebook.</p>
<blockquote>
<p>Je pars du principe que si vous arrivez la, vous connaissez un minimum l'utilisation de Symfony et de API-Platform. Je vais donc passer tr√®s vite sur l'initialisation.</p>
</blockquote>
<h3><a id="content-toc" href="#content-toc" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>TOC</h3>
<ul>
<li>
<a href="#cr%C3%A9ation-dun-projet">Cr√©ation d'un projet</a>
</li>
<li>
<a href="#initialisation-de-la-plateforme">Initialisation de la plateforme</a>
</li>
<li>
<a href="#cr%C3%A9ation-dun-endpoint-de-test">Cr√©ation d'un endpoint de test</a>
</li>
<li>
<a href="#r%C3%A9cup%C3%A9rer-des-cr%C3%A9dentials-oauth-pour-se-connecter-avec-google">R√©cup√©rer des cr√©dentials Oauth pour se connecter avec Google</a>
</li>
<li>
<a href="#authentication">Authentication</a>
</li>
<li>
<a href="#un-autre-oauth-provider--github">Un autre OAuth provider : Github</a>
</li>
<li>
<a href="#plusieurs-oauth-login-sur-swagger-ui">Plusieurs OAuth Login sur Swagger UI</a>
</li>
</ul>
<h2><a id="content-cr√©ation-dun-projet" href="#content-cr√©ation-dun-projet" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>Cr√©ation d'un projet</h2>
<p>Pour notre projet, nous allons rapidement cr√©er une application symfony avec API-Platform</p>
<pre><code class="language-bash">composer create-project symfony/website-skeleton api-oauth
cd api-oauth
composer req api
symfony local:server:start -d
</code></pre>
<blockquote>
<p>J'utilise le website-skeleton pour avoir tous les composants Symfony, et ne pas a avoir a faire de multiples <code>composer require</code>. L'utilisateur aguerri partira bien √©videmment du <code>skeleton</code> tout cours.</p>
</blockquote>
<h2><a id="content-initialisation-de-la-plateforme" href="#content-initialisation-de-la-plateforme" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>Initialisation de la plateforme</h2>
<p>Premierement, nous allons alt√©rer la configuration d'api platform, pour repasser sur swagger v2 plutot que la v3.</p>
<pre><code class="language-yaml"># config/packages/api_platform.yml
api_platform:
    #...
    swagger:
        versions: [2]
</code></pre>
<blockquote>
<p>Cette √©tape pourra √™tre √©vit√© quand <a href="https://github.com/api-platform/core/pull/3333">cette PR</a> sera merg√©e et released.</p>
</blockquote>
<p>Puis, cr√©ons une entit√© de test :</p>
<pre><code class="language-bash">php bin/console make:entity Book --api-resource
</code></pre>
<p>Et une entit√©e user (sans besoin de hash password )</p>
<pre><code class="language-bas">php bin/console make:user
</code></pre>
<p>Et on met √† jour la BDD.</p>
<pre><code class="language-bash">php bin/console d:s:u --force
</code></pre>
<h2><a id="content-cr√©ation-dun-endpoint-de-test" href="#content-cr√©ation-dun-endpoint-de-test" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>Cr√©ation d'un endpoint de test</h2>
<p>Nous allons cr√©√© un endpoint de test qui se contentera de retourner l'utilisateur.</p>
<pre><code class="language-bash">php bin/console make:controller WhoAmIController --no-template
</code></pre>
<p>Alterons ce controleur pour le rendre invokable, et pour retourner l'utilisateur courant :</p>
<pre><code class="language-php">// src/Controller/WhoAmIController.php
&lt;?php
declare(strict_types=1);

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Security\Core\User\UserInterface;

final class WhoAmIController extends AbstractController
{
    public function __invoke(): ?UserInterface
    {
        return $this-&gt;getUser();
    }
}
</code></pre>
<p>Allons modifier la classe <code>User</code> pour la d√©finir en tant que ressource ApiPlatform, et ajoutons dedans notre controller.</p>
<pre><code class="language-php">// src/Entity/User.php
&lt;?php
declare(strict_types=1);
    
namespace App\Entity;

use ApiPlatform\Core\Annotation\ApiResource;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Security\Core\User\UserInterface;
use App\Controller\WhoAmIController;

/**
 * @ApiResource(
 *     collectionOperations={
 *          &quot;get&quot;, &quot;post&quot;,
 *          &quot;whoami&quot;= {
 *              &quot;method&quot;=&quot;GET&quot;,
 *              &quot;path&quot;=&quot;/whoami&quot;,
 *              &quot;controller&quot;=WhoAmIController::class,
 *          },
 *     }
 * )
 * @ORM\Entity(repositoryClass=&quot;App\Repository\UserRepository&quot;)
 */
class User implements UserInterface 
{
    // ...
}
</code></pre>
<p>Je rajoute le controleur dans les <code>collectionOperations</code> , mais il conviendrai mieux dans <code>itemOperations</code>. Je ne souhaites juste pas m'emb√™ter a devoir enlever le champ <code>id</code> du swagger pour l'instant.</p>
<p>Si on ex√©cute le endpoint <code>/api/whoami</code>, on re√ßoit <code>null</code>. Parfait. Passons √† l'OAuth.</p>
<h2><a id="content-r√©cup√©rer-des-cr√©dentials-oauth-pour-se-connecter-avec-google" href="#content-r√©cup√©rer-des-cr√©dentials-oauth-pour-se-connecter-avec-google" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>R√©cup√©rer des cr√©dentials Oauth pour se connecter avec Google</h2>
<p>Notre premier authenticator sera Google.
Depuis la <a href="https://console.developers.google.com/apis/credentials">console developper</a>, cr√©eons d'abord un &quot;Ecran d'autorisation Oauth&quot;. (Il n'est pas n√©cessaire de renseigner les domaines pour l'instant).</p>
<p>Puis, toujours dans cette console, cr√©eons des identifiants &quot;ID Client Oauth&quot;.</p>
<p>Ici, il est important de rajouter une Url de redirection autoris√©e ainsi en adaptant votre domaine:</p>
<pre><code class="language-bash">https://127.0.0.1:8000/bundles/apiplatform/swagger-ui/oauth2-redirect.html
</code></pre>
<p>Puis on stock notre ID et SECRET dans le fichier <code>.env</code></p>
<pre><code class="language-ini">#.env
# ...
OAUTH_GOOGLE_ID=&quot;monid&quot;
OAUTH_GOOGLE_SECRET=&quot;monsecret&quot;
</code></pre>
<p>Completons la configuration d'API Platform :</p>
<pre><code class="language-yaml"># config/packages/api_platform.yaml
api_platform:
    # ...
    oauth:
        enabled: true
        clientId: '%env(OAUTH_GOOGLE_ID)%'
        clientSecret: '%env(OAUTH_GOOGLE_SECRET)%'
        type: 'oauth2'
        # The oauth flow grant type.
        flow: 'authorizationCode'
        # The oauth authentication url.
        authorizationUrl: 'https://accounts.google.com/o/oauth2/v2/auth'
        # The oauth token url.
        tokenUrl: 'https://www.googleapis.com/oauth2/v4/token'
        # The oauth scopes.
        scopes:
            email: 'Allow to retrieve user email'
</code></pre>
<p>Nous pouvons maintenant tester l'authorization depuis notre UI Swagger.</p>
<p>Une barre apparait avec un bouton &quot;Authorize&quot; dans la documentation :</p>
<p><img src="https://user-images.githubusercontent.com/3168281/72219427-e5a08180-353d-11ea-99c8-228bf401dc98.png" alt="image" /></p>
<p>Lorsqu'on clique dessus, une popin apparait :</p>
<p><img src="https://user-images.githubusercontent.com/3168281/72219423-df120a00-353d-11ea-8f81-6405fdde5c80.png" alt="image" /></p>
<p>On reclique sur Authorize, un nouvel onglet s'ouvre sur Google, puis nous somme redirig√© sur la documentation.
L'OAuth s'est bien pass√©.</p>
<h2><a id="content-authentication" href="#content-authentication" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>Authentication</h2>
<p>Nous sommes a pr√©sent bien connect√© via l'Oauth de google. Pour chaque appel que nous faisons a l'API, un header <code>Authorization: Bearer accessToken</code> est ajout√©.</p>
<p>Mais si nous appelons le endpoint <code>/api/whoami</code>, il retourne toujours <code>null</code>.
Voyons comment r√©cup√©rer notre utilsateur.</p>
<p>Tout d'abord, g√©n√©rons un GuardAuthenticator :</p>
<pre><code class="language-bash">php bin/console make:auth
</code></pre>
<p>Lorsque cette commande le demande, choisissez &quot;Empty Authenticator&quot;</p>
<p>Puis r√©cup√©rons league/oauth2-google</p>
<pre><code class="language-bash">composer require league/oauth2-google
</code></pre>
<p>Dans notre <code>services.yaml</code>, cr√©eons un service pour le google Provider</p>
<pre><code class="language-yaml">services:
    # ...
    League\OAuth2\Client\Provider\Google:
        class: League\OAuth2\Client\Provider\Google
        arguments:
            - {clientId: '%env(OAUTH_GOOGLE_ID)%', clientSecret: '%env(OAUTH_GOOGLE_SECRET)%'}
</code></pre>
<p>Et injectons ce service dans notre authenticator :</p>
<pre><code class="language-php">// src/Security/GoogleOauthAuthenticator.php
&lt;?php
declare(strict_types=1);

namespace App\Security;

use League\OAuth2\Client\Provider\Google;
use Doctrine\ORM\EntityManagerInterface;
//...
use Symfony\Component\Security\Guard\AbstractGuardAuthenticator;

final class GoogleOauthAuthenticator extends AbstractGuardAuthenticator
{
    /**
     * @var \League\OAuth2\Client\Provider\Google
     */
    private $client;
    /**
     * @var \Doctrine\ORM\EntityManagerInterface
     */
    private $entityManager;

    public function __construct(Google $client, EntityManagerInterface $entityManager)
    {
        $this-&gt;client = $client;
        $this-&gt;entityManager = $entityManager;
    }
</code></pre>
<p>Completons maintenant les diff√©rentes m√©thodes de notre <code>GoogleOauthAuthenticator</code>.</p>
<p>La m√©thode <code>support</code> permet de v√©rifier si les conditions sont bien remplies pour qu'on appelle la classe.
Dans notre cas, il s'agit de v√©rifier la pr√©sence du nouvel header <code>authorization</code>.</p>
<pre><code class="language-php">    public function supports(Request $request): bool
    {
        return $request-&gt;headers-&gt;has('authorization');
    }
</code></pre>
<p>La m√©thode <code>getCredentials</code>  permet d'extraire les cr√©dentials n√©cessaire pour la r√©cup√©ration de notre Utilisateur.</p>
<pre><code class="language-php">    public function getCredentials(Request $request)
    {
        $accessToken = explode(' ', $request-&gt;headers-&gt;get('authorization'))[1];

        return new \League\OAuth2\Client\Token\AccessToken(['access_token' =&gt; $accessToken]);
    }
</code></pre>
<blockquote>
<p>Ici, on explose le contenu du header, le token est la deuxi√®me partie.</p>
</blockquote>
<p>La m√©thode <code>getUser</code> doit retrouver l'utilisateur √† partir des cr√©dentials. C'est ici qu'on va utiliser notre nouveau service.</p>
<pre><code class="language-php">    public function getUser($credentials, UserProviderInterface $userProvider): ?UserInterface
    {
        /** @var \League\OAuth2\Client\Provider\GoogleUser $googleUser */
        $googleUser = $this-&gt;client-&gt;getResourceOwner($credentials);

        $email = $googleUser-&gt;getEmail();
		
        try {
            $user = $userProvider-&gt;loadUserByUsername($email);
        } catch (UsernameNotFoundException $exception) {
            $user = (new User())-&gt;setEmail($email);
            $this-&gt;entityManager-&gt;persist($user);
            $this-&gt;entityManager-&gt;flush();
        }

        return $user;
    }
</code></pre>
<p>Enfin, la m√©thode <code>checkCredential</code> doit toujours retourner <code>true</code>, et la methode <code>supportsRememberMe</code> retournera <code>false</code>.</p>
<pre><code class="language-php">    public function checkCredentials($credentials, UserInterface $user): bool
    {
        return true;
    }
    public function supportsRememberMe(): bool
    {
        return false;
    }
</code></pre>
<p>Et c'est tout. Les autres m√©thodes peuvent rester vide pour l'instant, il conviendra de le remplir correctement le temps venu.</p>
<p>Si dor√©navant, nous appelons l'endpoint <code>/api/whoami</code>, notre utilisateur va √™tre renvoy√©.</p>
<h2><a id="content-un-autre-oauth-provider--github" href="#content-un-autre-oauth-provider--github" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>Un autre OAuth provider : Github</h2>
<p>La plupart du temps, nous proposons √† nos utilisateurs plusieurs moyen de se connecter. Voyons comment ajouter une deuxieme authentification avec Github OAuth.</p>
<p>Commen√ßons par <a href="https://developer.github.com/apps/building-oauth-apps/">cr√©er une application OAuth sur Github</a> et ajoutons nos nouveaux credentials dans le fichier <code>.env</code>.</p>
<pre><code class="language-ini">#.env
#...
OAUTH_GITHUB_ID=monid
OAUTH_GITHUB_SECRET=monsecret
</code></pre>
<p>Rempla√ßons temporairement la configuration d'API Platform pour utiliser Github en OAuth.</p>
<pre><code class="language-yaml">#config/packages/api_platform.yaml
api_platform:
    # ...
    oauth:
        enabled: true
        clientId: '%env(OAUTH_GITHUB_ID)%'
        clientSecret: '%env(OAUTH_GITHUB_ID)%'
        type: 'oauth2'
        # The oauth flow grant type.
        flow: 'authorizationCode'
        # The oauth authentication url.
        authorizationUrl: 'https://github.com/login/oauth/authorize'
        # The oauth token url.
        tokenUrl: 'https://github.com/login/oauth/access_token'
        # The oauth scopes.
        scopes:
            'user:email': 'Allow to retrieve user email'
</code></pre>
<p>Si nous r√©essayons le flow OAuth depuis Swagger UI, une erreur survient :</p>
<blockquote>
<p><strong>Auth Error</strong> TypeError: Failed to fetch</p>
</blockquote>
<p>En inspectant les requ√™tes depuis l'inspecteur web, on se rend compte que l'url pour r√©cup√©rer l'accessToken ne prend pas en charge les CORS.</p>
<p>Nous devons donc cr√©er un controlleur qui s'occupera de r√©cup√©rer notre AccessToken.</p>
<pre><code class="language-bash">php bin/console make:controller GithubTokenController --no-template
</code></pre>
<p>Et nous allons utiliser le paquet <code>league/oauth2-github</code> qui fera l'appel pour nous :</p>
<pre><code class="language-bash">composer require league/oauth2-github
</code></pre>
<p>De la m√™me mani√®re que pour Google, ajoutons ce provider en tant que service :</p>
<pre><code class="language-yaml">#config/services.yaml

services:
    # ...
    League\OAuth2\Client\Provider\Github:
        class: League\OAuth2\Client\Provider\Github
        arguments:
            - {clientId: '%env(OAUTH_GITHUB_ID)%', clientSecret: '%env(OAUTH_GITHUB_SECRET)%'}

</code></pre>
<p>Injectons ce service dans notre controller et renvoyons l'accessToken :</p>
<pre><code class="language-php">// src/Controller/GithubTokenController.php
&lt;?php
declare(strict_types=1);

namespace App\Controller;

use League\OAuth2\Client\Provider\Github;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;

final class GithubTokenController
{
    /**
     * @Route(&quot;/github/token&quot;, name=&quot;github_token&quot;)
     */
    public function index(Request $request, Github $client): JsonResponse
    {
        return new JsonResponse(
            $client-&gt;getAccessToken('authorization_code', [
                'code' =&gt; $request-&gt;request-&gt;get('code'),
            ])
        );
    }
}
</code></pre>
<p>Et on change la valeur de tokenUrl dans la config d'API Platform par notre nouvelle route :</p>
<pre><code class="language-yaml">#config/packages/api_platform.yaml
api_platform:
    # ...
    oauth: 
        # ...
        tokenUrl: '/github/token'
</code></pre>
<p>Si nous r√©essayons le flow d'authorization sur Swagger UI, tout devrait bien passer maintenant.</p>
<p>Pour g√©rer l'authentification, nous allons devoir, comme auparavant pour Google, cr√©er un GuardAuthenticator.</p>
<pre><code class="language-bash">php bin/console make:auth
</code></pre>
<blockquote>
<p>A la cr√©ation, un avertissement vous pr√©viendra du comportement lorsque nous avons plusieurs Authenticators et vous demandera de choisir l'entry_point par d√©faut. Choisissez celui nouvellement cr√©√©.</p>
<p>Plus d'info sur <a href="https://symfony.com/doc/current/security/multiple_guard_authenticators.html">la documentation</a>.</p>
</blockquote>
<p>Le principe est le m√™me que pour celui de Google, il faudra juste injecter le GithubProvider √† la place.</p>
<p>Si on essaye d'appeler l'endpoint <code>/api/whoami</code>, nous obtenons ... une erreur.</p>
<pre><code class="language-json">{
	&quot;type&quot;: &quot;https:\/\/tools.ietf.org\/html\/rfc2616#section-10&quot;,
	&quot;title&quot;: &quot;An error occurred&quot;,
	&quot;detail&quot;: &quot;invalid_request&quot;
}
</code></pre>
<p>En utilisant le profiler, on peut voir que l'authentification s'est bien pass√©, nous avons un utilisateur logg√©, mais on passe ensuite dans le GoogleOAuthAuthenticator, qui essaye de r√©cup√©rer les information avec un accessToken qui vient de Github, et on a donc une exception.</p>
<p>Pour palier √† √ßa, nous pouvons faire un try/catch dans les GuardAuthenticators au moment de r√©cuperer les utilisateurs, et retourner <code>null</code> si l'appel l√®ve une erreur.</p>
<pre><code class="language-php">// src/Security/GoogleOAuthAuthenticator.php
// ...
    public function getUser($credentials, UserProviderInterface $userProvider): ?UserInterface
    {
        try {
            /** @var \League\OAuth2\Client\Provider\GoogleUser $googleUser */
            $googleUser = $this-&gt;client-&gt;getResourceOwner($credentials);
        } catch (\Throwable $throwable) {
            return null;
        }

        //...
        return $user;
    }
</code></pre>
<p>Mais nous pouvons aussi regrouper les deux Guard en un seul.
Pour cela, dans le <code>services.yaml</code>, ajoutons un tag sur nos OAuth providers :</p>
<pre><code class="language-yaml">#config/services.yaml
services:
    # ...
    League\OAuth2\Client\Provider\Google:
        class: League\OAuth2\Client\Provider\Google
        arguments:
            - {clientId: '%env(OAUTH_GOOGLE_ID)%', clientSecret: '%env(OAUTH_GOOGLE_SECRET)%'}
        tags:
            - {name: 'oauth_provider'}

    League\OAuth2\Client\Provider\Github:
        class: League\OAuth2\Client\Provider\Github
        arguments:
            - {clientId: '%env(OAUTH_GITHUB_ID)%', clientSecret: '%env(OAUTH_GITHUB_SECRET)%'}
        tags:
            - {name: 'oauth_provider'}

</code></pre>
<p>Retirons les guard actuels dans notre security.yaml</p>
<pre><code class="language-diff">#config/packages/security.yaml
security:
    # ...
    firewalls:
        #...
        main:
            anonymous: lazy
-            guard:
-                authenticators:
-                    - App\Security\GithubOAuthAuthenticator
-                    - App\Security\GoogleOauthAuthenticator
-                entry_point: App\Security\GithubOAuthAuthenticator

</code></pre>
<p>Et cr√©ons un nouveau Guard : ChainOAuthAuthenticator.</p>
<pre><code class="language-php">// src/Security/ChainOAuthAuthenticator
&lt;?php
declare(strict_types=1);

namespace App\Security;

use App\Entity\User;
use Doctrine\ORM\EntityManagerInterface;
use League\OAuth2\Client\Token\AccessToken;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Security\Core\Authentication\Token\TokenInterface;
use Symfony\Component\Security\Core\Exception\AuthenticationException;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Guard\AbstractGuardAuthenticator;

final class ChainOAuthAuthenticator extends AbstractGuardAuthenticator
{
    /**
     * @var iterable&lt;\League\OAuth2\Client\Provider\AbstractProvider&gt;
     */
    private $oauthProviders;
    /**
     * @var \Doctrine\ORM\EntityManagerInterface
     */
    private $entityManager;

    public function __construct(iterable $oauthProviders, EntityManagerInterface $entityManager)
    {
        $this-&gt;oauthProviders = $oauthProviders;
        $this-&gt;entityManager = $entityManager;
    }

    public function supports(Request $request): bool
    {
        return $request-&gt;headers-&gt;has('authorization');
    }

    public function getCredentials(Request $request): AccessToken
    {
        $accessToken = explode(' ',$request-&gt;headers-&gt;get('authorization'))[1];

        return new AccessToken(['access_token' =&gt; $accessToken]);
    }

    public function getUser($credentials, UserProviderInterface $userProvider): ?UserInterface
    {
        $oauthUser = null;
        /** @var \League\OAuth2\Client\Provider\AbstractProvider $oauthProvider */
        foreach ($this-&gt;oauthProviders as $oauthProvider) {
            try {
                $oauthUser = $oauthProvider-&gt;getResourceOwner($credentials);
                break;
            } catch (\Throwable $throwable) {
                // This provider doesn't support current accessToken
            }
        }

        if (null === $oauthUser) {
            // No OAuth user found
            return null;
        }

        $email = $oauthUser-&gt;getEmail();

        try {
            $user = $userProvider-&gt;loadUserByUsername($email);
        } catch (UsernameNotFoundException $exception) {
            $user = (new User())-&gt;setEmail($email);
            $this-&gt;entityManager-&gt;persist($user);
            $this-&gt;entityManager-&gt;flush();
            $this-&gt;entityManager-&gt;refresh($user);
        }

        return $user;
    }

    public function checkCredentials($credentials, UserInterface $user): bool
    {
        return true;
    }

    public function onAuthenticationFailure(Request $request, AuthenticationException $exception)
    {
        $message = strtr($exception-&gt;getMessageKey(), $exception-&gt;getMessageData());

        return new JsonResponse($message, JsonResponse::HTTP_FORBIDDEN);
    }

    public function onAuthenticationSuccess(Request $request, TokenInterface $token, $providerKey)
    {
        // No need to redirect, as it's a stateless call.
        // Let the request continue to be handled by the controller
        return null;
    }

    public function start(Request $request, AuthenticationException $authException = null)
    {
        $message = 'Auth header required';
        if (null !== $authException) {
            $message = strtr($authException-&gt;getMessageKey(), $authException-&gt;getMessageData());
        }

        return new JsonResponse($message, JsonResponse::HTTP_UNAUTHORIZED);
    }

    public function supportsRememberMe(): bool
    {
        return false;
    }
}
</code></pre>
<p>Puis modifions le <code>services.yaml</code> pour injecter automatiquement nos providers tagg√©s.</p>
<pre><code class="language-yaml">#config/services.yaml

services:
    _defaults:
        autowire: true
        autoconfigure: true
        bind:
            iterable $oauthProviders: !tagged_iterator oauth_provider
    # ...
</code></pre>
<p>Notre ChainOAuthAuthenticator s'occupera donc maintenant de tester notre AccessToken avec les diff√©rents OAuthProviders.</p>
<h2><a id="content-plusieurs-oauth-login-sur-swagger-ui" href="#content-plusieurs-oauth-login-sur-swagger-ui" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>Plusieurs OAuth Login sur Swagger UI</h2>
<p>Comme vu pr√©cedemment, API Platform ne propose pas (<em>encore</em>) la possibilit√© de rajouter plusieurs OAuth dans sa configuration.</p>
<p>Swagger UI dans sa v2 le supporte, tout comme la v3. Cependant, dans la v2, les champs client_id et client_secret ne s'affichent pas, et nous devons pouvoir les diff√©renciers.</p>
<p>De m√™me, Swagger UI propose une fonction pour initialiser ces champs, mais est limit√© √† un seul OAuth login. Donc si nous en affichons plusieurs, ils utiliseront tous les m√™mes valeurs.</p>
<p>Pour afficher nos OAuth login sur le Swagger UI d'API Platform, nous allons donc &quot;d√©sactiver&quot; le support OAuth d'API Platform, et au passage activer la v3 :</p>
<pre><code class="language-yaml"># config/packages/api_platform.yaml
api_platform:
    # ...
    swagger:
        versions: [3]
    oauth:
        enabled: false
</code></pre>
<p>D√©finissons nos flows OAuth dans nos parametres</p>
<pre><code class="language-yaml">#config/services.yaml
parameters:
    oauths:
        github:
            type: oauth2
            description: OAuth authorization code Grant
            flows:
                authorizationCode:
                    tokenUrl: '/github/token'
                    authorizationUrl: 'https://github.com/login/oauth/authorize'
                    scopes:
                        'user:email': 'Allow to retrieve user email'
        google:
            type: oauth2
            description: OAuth authorization code Grant
            flows:
                authorizationCode:
                    tokenUrl: 'https://www.googleapis.com/oauth2/v4/token'
                    authorizationUrl: 'https://accounts.google.com/o/oauth2/v2/auth'
                    scopes:
                        'email': 'Allow to retrieve user email'
services:
    # ...
</code></pre>
<p>Et cr√©eons un <a href="https://api-platform.com/docs/core/swagger/#overriding-the-openapi-specification">SwaggerDecorator</a>, auquel on passe notre d√©finition de flows OAuth</p>
<pre><code class="language-yaml"># config/services.yaml
#...
services:
    # ...
    App\Swagger\OAuthSwaggerDecorator:
        decorates: 'api_platform.swagger.normalizer.api_gateway'
        arguments: [ '@App\Swagger\OAuthSwaggerDecorator.inner', '%oauths%' ]
        autoconfigure: false
</code></pre>
<pre><code class="language-php">// src/Swagger/OAuthSwaggerDecorator.php
&lt;?php
declare(strict_types=1);

namespace App\Swagger;

use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

final class OAuthSwaggerDecorator implements NormalizerInterface
{
    private $decorated;
    /**
     * @var array
     */
    private $oauths;

    public function __construct(NormalizerInterface $decorated, array $oauths)
    {
        $this-&gt;decorated = $decorated;
        $this-&gt;oauths = $oauths;
    }

    public function normalize($object, string $format = null, array $context = [])
    {
        // Retrieve swagger docs
        $docs = $this-&gt;decorated-&gt;normalize($object, $format, $context);

        // Add our flows in securitySchemes
        $docs['components']['securitySchemes'] = $this-&gt;oauths;
        $docs['security'] = [array_map(static function($value): array {
            return [];
        }, $this-&gt;oauths)];
        
        return $docs;
    }

    public function supportsNormalization($data, string $format = null)
    {
        return $this-&gt;decorated-&gt;supportsNormalization($data, $format);
    }
}
</code></pre>
<p>Swagger UI affiche maintenant les deux mode de connection OAuth dans sa popin.</p>
<p>Malheureusement, les champs clientId et clientSecret sont vide. Pour pouvoir appeler nos service, on devra les renseigner.</p>
<p>Comme dis pr√©cedemment, Swagger UI ne supporte pas de pouvoir renseigner ces champs lorsqu'on a plusieurs authentifications. √áa arrivera peut-√™tre un jour, suivez cette <a href="https://github.com/swagger-api/swagger-ui/issues/4690">issue</a>.</p>
<p>En attendant, nous allons tweaker l'interface pour remplir ces champs pour nous.</p>
<p>Pour cela, il va nous falloir faire un override du template SwaggerUi, injecter dedans nos information de client, et enfin ajouter des boutons pour changer √† la vol√©e.</p>
<p>Pour l'override du template, cr√©er un fichier <code>templates/bundles/ApiPlatformBundle/SwaggerUi/index.html.twig</code> :</p>
<pre><code class="language-twig">{% extends '@!ApiPlatform/SwaggerUi/index.html.twig' %}
{% block javascript %}
    {{ parent() }}
    &lt;script &gt;
        var oauths = {{ oauth_providers()|raw }};
    &lt;/script&gt;
    &lt;script src=&quot;{{ asset('swagger-oauth.js') }}&quot;&gt;&lt;/script&gt;
{% endblock %}
</code></pre>
<p>La fonction <code>oauth_providers</code> nous permet de rajouter la configuration de nos providers OAuth.
Ajoutons cette fonction :</p>
<pre><code class="language-bash">php bin/console make:twig-extension OAuthExtension
</code></pre>
<pre><code class="language-php">// src/Twig/OAuthExtension
&lt;?php
declare(strict_types=1);

namespace App\Twig;

use Twig\Extension\AbstractExtension;
use Twig\TwigFilter;
use Twig\TwigFunction;

final class OAuthExtension extends AbstractExtension
{
    /**
     * @var iterable&lt;\League\OAuth2\Client\Provider\AbstractProvider&gt;
     */
    private $oauthProviders;

    public function __construct(iterable $oauthProviders)
    {
        $this-&gt;oauthProviders = $oauthProviders;
    }

    public function getFunctions(): array
    {
        return [
            new TwigFunction('oauth_providers', [$this, 'oauthProviders']),
        ];
    }

    public function oauthProviders(): string
    {
        $data = [];
        /** @var \League\OAuth2\Client\Provider\AbstractProvider $provider */
        foreach ($this-&gt;oauthProviders as $provider)
        {
            $reflectionClass = new \ReflectionClass($provider);
            
            $clientIdProperty = $reflectionClass-&gt;getProperty('clientId');
            $clientIdProperty-&gt;setAccessible(true);

            $clientSecretProperty = $reflectionClass-&gt;getProperty('clientSecret');
            $clientSecretProperty-&gt;setAccessible(true);

            $clientId = $clientIdProperty-&gt;getValue($provider);
            $clientSecret = $clientSecretProperty-&gt;getValue($provider);

            $data[] = [
                'name' =&gt; strtolower($reflectionClass-&gt;getShortName()),
                'client_id' =&gt; $clientId,
                'client_secret' =&gt; $clientSecret
            ];
        }

        return json_encode($data);
    }
}
</code></pre>
<p>Ici, on r√©utilise l'injection des providers tagg√© <code>oauth_provider</code>, afin de faire √©voluer directement le rendu quand on ajoutera de nouveaux provider.</p>
<p>Maintenant, rajoutons le javascript qui va cr√©er les boutons et appeler la fonction initOauth de swagger :</p>
<pre><code class="language-js">// public/swagger-oauth.js
'use strict';

window.addEventListener('load', function() {
    // Same in init-swagger-ui provided by API Platform
    const data = JSON.parse(document.getElementById('swagger-data').innerText);
    const ui = SwaggerUIBundle({
        spec: data.spec,
        dom_id: '#swagger-ui',
        validatorUrl: null,
        oauth2RedirectUrl: data.oauth.redirectUrl,
        presets: [
            SwaggerUIBundle.presets.apis,
            SwaggerUIStandalonePreset,
        ],
        plugins: [
            SwaggerUIBundle.plugins.DownloadUrl,
        ],
        layout: 'StandaloneLayout',
    });

    const authWrapper = document.getElementsByClassName('auth-wrapper')[0];

    // Create an info about current credentials
    const info = document.createElement(&quot;p&quot;);
    let oauthTxt = &quot;Current OAuth Credentials : &quot;;
    info.innerText = oauthTxt + &quot;None&quot;;

    authWrapper.parentNode.insertBefore(info, authWrapper);

    oauths.forEach(function (elem) {
        const btn = document.createElement(&quot;button&quot;);
        btn.classList = 'btn';
        btn.innerText = 'OAuth ' + elem.name;
        btn.onclick = function() {
            ui.initOAuth({
                clientId: elem.client_id,
                clientSecret: elem.client_secret
            });
            info.innerText = oauthTxt + elem.name;
        };
        // Add btn near to authorize button
        authWrapper.appendChild(btn);
    });
});

</code></pre>
<p>Voici le rendu :</p>
<p><img src="https://user-images.githubusercontent.com/3168281/72219384-7fb3fa00-353d-11ea-8953-a1ad803f9b68.png" alt="image" /></p>
<p>Au clic sur le bouton OAuth google, les credentials de Google seront pr√©remplis dans la popin.</p>
 ]]></content:encoded>
                <pubDate>Sat, 11 Jan 2020 19:15:51 +0000</pubDate>
                <author>Jib√© Barth</author>
            </item>
                                            <item>
                <title>üá´üá∑ Sylius - Utiliser un th√®me externe </title>
                <description>#Sylius - Utiliser un th√®me externe

#Introduction au th√®me dans Syl...
</description>
                <link>https://jib√©barth.fr/gist/a0ce0fbd0464ad353ea9efc4e61e4225</link>
                <guid>https://jib√©barth.fr/gist/a0ce0fbd0464ad353ea9efc4e61e4225</guid>
                <content:encoded><![CDATA[ <h1><a id="content-sylius---utiliser-un-th√®me-externe" href="#content-sylius---utiliser-un-th√®me-externe" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>Sylius - Utiliser un th√®me externe</h1>
<p><img src="https://media.giphy.com/media/Ffalrm4Dec9WM/giphy.gif" alt="La r√©action du client quand on met son logo sur le th√®me de base" /></p>
<h2><a id="content-introduction-au-th√®me-dans-sylius" href="#content-introduction-au-th√®me-dans-sylius" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>Introduction au th√®me dans Sylius</h2>
<p>Les th√®mes dans Sylius sont tr√®s utiles quand le fonctionnement d'<strong>override</strong> standard de Symfony atteint ses limites.</p>
<p>La <a href="https://docs.sylius.com/en/1.4/book/themes/themes.html">documentation</a> nous dit :</p>
<blockquote>
<p><strong>Quand utiliser les th√®mes Sylius:</strong></p>
<ul>
<li>vous avez plus d'un canal pour une seule instance Sylius</li>
<li>
<strong>et</strong> vous voulez que chaque canal ait son apparence et son comportement</li>
<li>vous changez beaucoup de choses dans les vues</li>
</ul>
</blockquote>
<h2><a id="content-cr√©er-un-th√®me" href="#content-cr√©er-un-th√®me" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>Cr√©er un th√®me</h2>
<p>On peut cr√©er un th√®me de mani√®re tr√®s simple en lan√ßant les commandes suivantes depuis votre installation Sylius :</p>
<pre><code class="language-bash">$ mkdir -p themes/AwesomeTheme
$ composer init -d themes/AwesomeTheme 
# R√©pondre au questionnaire de composer pour initialiser le composer.json. 
# Il n'y a pas de d√©pendances n√©cessaires
$ composer config extra.sylius-theme.title &quot;Awesome Theme&quot; -d themes/AwesomeTheme  
</code></pre>
<p>Et voila, nous avons un nouveau th√®me configurable sur chaque channel üéâ</p>
<h2><a id="content-un-th√®me-alternatif-le-bootstraptheme" href="#content-un-th√®me-alternatif-le-bootstraptheme" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>Un th√®me alternatif, le BootstrapTheme</h2>
<p>Sylius a cr√©√© en F√©vrier 2019 un <a href="https://github.com/Sylius/BootstrapTheme">nouveau th√®me</a>  bas√© sur l'excellent Framework <a href="https://getbootstrap.com/">Bootstrap</a>.</p>
<p>Malheureusement, la proc√©dure d'installation fournie propose de t√©l√©charger le th√®me, et l'inclure (et donc versionner) dans notre dossier th√®me, nous privant ainsi de potentielles mises √† jour. Et comme ce th√®me est cr√©√© par l'√©quipe de Sylius en personne, on peut s'attendre a ce qu'il suive les mises √† jours du framework.</p>
<p>Mais heureusement, en cr√©ant des th√®mes avec un composer.json, on peut tr√®s bien le r√©cup√©rer via notre gestionnaire de d√©pendances pr√©f√©r√© : <strong>COMPOSER</strong> üôå</p>
<pre><code class="language-bash">$ composer require sylius/bootstrap-theme
</code></pre>
<p>Pour rendre ce nouveau th√®me disponible dans notre application, on va devoir alt√©rer la configuration du bundle <code>SyliusTheme</code> :</p>
<pre><code class="language-yaml"># config/packages/_sylius.yaml
# [...]
sylius_theme:
    sources:  
        filesystem:  
            directories:  
                - &quot;%kernel.project_dir%/vendor/sylius/bootstrap-theme&quot;  
                - &quot;%kernel.project_dir%/themes&quot;
</code></pre>
<p>Dans la liste des <strong>directories</strong>, on indique au bundle d'aller regarder √©galement dans les vendors.</p>
<p>Le th√®me est maintenant disponible sur notre configuration de channel.</p>
<p>Il conviendra bien s√ªr d'√©x√©cuter le processus d'installation du th√®me pour avoir les <code>assets</code>.
Pour cela, il faut suivre la <a href="https://github.com/Sylius/BootstrapTheme/blob/master/README.md">documentation tr√®s complete du th√®me</a> √† l'√©xception de l'√©tape 1 (la r√©cup√©ration du th√®me), et de l'√©tape 4, la configuration du <code>webpack.config.js</code>.</p>
<p>En effet, dans la configuration webpack d'exemple, le chemin pour aller r√©cup√©rer la configuration webpack du th√®me n'est pas le bon, mais il y aura √©galement une erreur dans la configuration webpack du th√®me, celui-ci s'attendant √† √™tre dans le dossier <code>themes/BootstrapTheme</code>.</p>
<p>Voici une configuration webpack qu'on peut utiliser √† la place :</p>
<pre><code class="language-js">// webpack.config.js
const Encore = require('@symfony/webpack-encore');

Encore
  .setOutputPath('public/bootstrap-theme')
  .setPublicPath('/bootstrap-theme')
  .addEntry('app', './vendor/sylius/bootstrap-theme/assets/app.js')
  .disableSingleRuntimeChunk()
  .cleanupOutputBeforeBuild()
  .enableSassLoader()
  .enableSourceMaps(!Encore.isProduction())
  .enableVersioning(Encore.isProduction());

const config = Encore.getWebpackConfig();
config.name = 'bootstrapTheme';

module.exports = [config];
</code></pre>
<p>Et voila, vous pouvez maintenant utiliser le th√®me bootstrap sur votre application.</p>
<p><img src="https://raw.githubusercontent.com/Sylius/BootstrapTheme/master/docs/homepage.png" alt="Aper√ßu de la boutique Sylius sur Bootstrap" /></p>
<h2><a id="content-personnaliser-le-th√®me" href="#content-personnaliser-le-th√®me" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>Personnaliser le th√®me</h2>
<p>√âvidemment, importer un th√®me de cette mani√®re n'a pas d‚Äôint√©r√™t  si on ne peut pas le modifier pour l'adapter √† notre boutique.
C'est la qu'entre en sc√®ne <a href="https://docs.sylius.com/en/latest/components_and_bundles/bundles/SyliusThemeBundle/theme_inheritance.html">l'h√©ritage des th√®mes</a> !</p>
<p>Reprenons notre <strong>AwesomeTheme</strong> cr√©√© plus haut, et faisons le √©tendre du BootstrapTheme :</p>
<pre><code class="language-js">// themes/AwesomeTheme/composer.json
{
    &quot;name&quot;: &quot;barth/awesome-theme&quot;,
    &quot;extra&quot;: {
        &quot;sylius-theme&quot;: {
            &quot;title&quot;: &quot;Awesome Theme&quot;,
            &quot;parents&quot;: [&quot;sylius/bootstrap-theme&quot;]
        }
    }
}
</code></pre>
<p>Et c'est tout. Notre <strong>AwesomeTheme</strong> aura le m√™me affichage que le BootstrapTheme. √Ä nous les joies du templating et de la customisation CSS üé®</p>
<p><img src="https://media.giphy.com/media/xT39D7GQo1m3LatZyU/giphy.gif" alt="Un d√©veloppeur frontend essayant de centrer verticalement une div" /></p>
<h2><a id="content-aller-plus-loin" href="#content-aller-plus-loin" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>Aller plus loin</h2>
<p>Le fonctionnement qu'on a mis en place peut-√™tre r√©-appliqu√© pour tout vos th√®mes ! On peut imaginer que le BootstrapTheme soit le <em>p√®re</em> de votre <strong>AgenceTheme</strong>, et lui m√™me le <em>p√®re</em> de votre <strong>ClientTheme</strong>.</p>
 ]]></content:encoded>
                <pubDate>Thu, 18 Apr 2019 19:10:12 +0000</pubDate>
                <author>Jib√© Barth</author>
            </item>
                                            <item>
                <title>Automatically managing personal and work git email</title>
                <description>In order to differentiate your professional and personal email address when working on git repositories, here is how I proceeded.
#1. Create a global git hooks folder
Create a folder where you...
</description>
                <link>https://jib√©barth.fr/gist/2bf3a3a752dc8ac178fc6c1b6348da48</link>
                <guid>https://jib√©barth.fr/gist/2bf3a3a752dc8ac178fc6c1b6348da48</guid>
                <content:encoded><![CDATA[ <p>In order to differentiate your professional and personal email address when working on git repositories, here is how I proceeded.</p>
<h2><a id="content-1-create-a-global-git-hooks-folder" href="#content-1-create-a-global-git-hooks-folder" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>1. Create a global git hooks folder</h2>
<p>Create a folder where you will drop the hooks that should apply to each repository.
And set the <code>core.hooksPath</code> on this folder</p>
<pre><code class="language-bash">git config --global core.hooksPath /path/to/my/centralized/hooks
</code></pre>
<h2><a id="content-2-create-a-post-checkout-hook" href="#content-2-create-a-post-checkout-hook" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>2. Create a post-checkout hook</h2>
<p>The hook post-checkout is triggered when you change branch, and also on the <code>git clone</code>. So it'll be executed for existing repo, and those you will clone later.</p>
<p>See <code>post-checkout</code> file below to see what I put in.</p>
<p>Don't forget to add execution permission on your new hook :</p>
<pre><code class="language-bash">chmod +x post-checkout
</code></pre>
<p>‚ö† The core.hooksPath support is new in Git version 2.9.</p>
 ]]></content:encoded>
                <pubDate>Sat, 16 Mar 2019 11:10:27 +0000</pubDate>
                <author>Jib√© Barth</author>
            </item>
                                            <item>
                <title>Composering a PrestaShop</title>
                <description>
Note : This is a guide for PS 1.6.x because 1.7 provide a composer.json

#How to use composer in PrestaShop
The PHP World is full of talentued developers. They create very usefull and powerfull...
</description>
                <link>https://jib√©barth.fr/gist/61c2e966a4c4d2b8b40186c790418427</link>
                <guid>https://jib√©barth.fr/gist/61c2e966a4c4d2b8b40186c790418427</guid>
                <content:encoded><![CDATA[ <blockquote>
<p>Note : This is a guide for PS 1.6.x because 1.7 provide a composer.json</p>
</blockquote>
<h1><a id="content-how-to-use-composer-in-prestashop" href="#content-how-to-use-composer-in-prestashop" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>How to use composer in PrestaShop</h1>
<p>The PHP World is full of talentued developers. They create very usefull and powerfull libraries.
In PrestaShop, developers often have to reimplement them. Unless use <a href="https://getcomposer.org">composer</a> !</p>
<h2><a id="content-init-a-composer" href="#content-init-a-composer" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>Init a composer</h2>
<p>First, you have to install composer to your system. I don't teach you how to do this, read the doc.
Then, in your project root, launch</p>
<pre><code class="language-bash">composer init
</code></pre>
<h2><a id="content-inject-autoload-in-composer" href="#content-inject-autoload-in-composer" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>Inject autoload in Composer</h2>
<p>The main file for PS is the famous <code>config/config.inc.php</code> wich define all PS need to work.</p>
<p>So we will be tempted to modify it to add <code>require ../vendor/autoload.php;</code>. But we don't want to edit this file directly, and add it in our VCS.</p>
<p>And guess what, PrestaShop devs have thought of everything!
In config.inc.php, we can found this line:</p>
<pre><code class="language-php">define('_PS_CUSTOM_CONFIG_FILE_', _PS_CONFIG_DIR_.'settings_custom.inc.php');

...

/* Custom config made by users */
if (is_file(_PS_CUSTOM_CONFIG_FILE_)) {
    include_once(_PS_CUSTOM_CONFIG_FILE_);
}
</code></pre>
<p>There is a proper way to include a config file.</p>
<p>So create a <code>config/settings_custom.inc.php</code> file with this inside :</p>
<pre><code class="language-php">&lt;?php
# Require Autoload from composer
require_once _PS_ROOT_DIR_ . '/vendor/autoload.php';
</code></pre>
<p>And you are able to use external libraries. Go on <a href="https://packagist.org/">packagist</a></p>
<h2><a id="content-and-after-" href="#content-and-after-" class="heading-permalink" aria-hidden="true" title="Permalink">#</a>And after ?</h2>
<p>Now, you can create modules, and use your libraries inside</p>
<p>But the must is to separate your modules in external repos to require them in your PrestaShop Installation.</p>
 ]]></content:encoded>
                <pubDate>Sat, 07 Oct 2017 20:41:37 +0000</pubDate>
                <author>Jib√© Barth</author>
            </item>
            </channel>
</rss>
